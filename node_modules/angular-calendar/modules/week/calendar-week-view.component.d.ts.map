{"version":3,"file":"calendar-week-view.component.d.ts","sources":["calendar-week-view.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, ChangeDetectorRef, OnChanges, OnInit, OnDestroy, TemplateRef, ElementRef, AfterViewInit } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { WeekDay, CalendarEvent, WeekViewAllDayEvent, WeekView, WeekViewHourColumn, WeekViewTimeEvent, WeekViewHourSegment, WeekViewHour, WeekViewAllDayEventRow } from 'calendar-utils';\nimport { ResizeEvent } from 'angular-resizable-element';\nimport { CalendarEventTimesChangedEvent } from '../common/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../common/calendar-utils.provider';\nimport { DateAdapter } from '../../date-adapters/date-adapter';\nimport { DragEndEvent, DropEvent, DragMoveEvent, ValidateDrag } from 'angular-draggable-droppable';\nimport { PlacementArray } from 'positioning';\nexport interface WeekViewAllDayEventResize {\n    originalOffset: number;\n    originalSpan: number;\n    edge: string;\n}\nexport interface CalendarWeekViewBeforeRenderEvent extends WeekView {\n    header: WeekDay[];\n}\n/**\n * Shows all events on a given week. Example usage:\n *\n * ```typescript\n * <mwl-calendar-week-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-week-view>\n * ```\n */\nexport declare class CalendarWeekViewComponent implements OnChanges, OnInit, OnDestroy, AfterViewInit {\n    protected cdr: ChangeDetectorRef;\n    protected utils: CalendarUtils;\n    protected dateAdapter: DateAdapter;\n    protected element: ElementRef<HTMLElement>;\n    /**\n     * The current view date\n     */\n    viewDate: Date;\n    /**\n     * An array of events to display on view\n     * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n     */\n    events: CalendarEvent[];\n    /**\n     * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n     */\n    excludeDays: number[];\n    /**\n     * An observable that when emitted on will re-render the current view\n     */\n    refresh: Subject<any>;\n    /**\n     * The locale used to format dates\n     */\n    locale: string;\n    /**\n     * The placement of the event tooltip\n     */\n    tooltipPlacement: PlacementArray;\n    /**\n     * A custom template to use for the event tooltips\n     */\n    tooltipTemplate: TemplateRef<any>;\n    /**\n     * Whether to append tooltips to the body or next to the trigger element\n     */\n    tooltipAppendToBody: boolean;\n    /**\n     * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n     * will be displayed immediately.\n     */\n    tooltipDelay: number | null;\n    /**\n     * The start number of the week.\n     * This is ignored when the `daysInWeek` input is also set as the `viewDate` will be used as the start of the week instead.\n     * Note, you should also pass this to the calendar title pipe so it shows the same days: {{ viewDate | calendarDate:(view + 'ViewTitle'):locale:weekStartsOn }}\n     */\n    weekStartsOn: number;\n    /**\n     * A custom template to use to replace the header\n     */\n    headerTemplate: TemplateRef<any>;\n    /**\n     * A custom template to use for week view events\n     */\n    eventTemplate: TemplateRef<any>;\n    /**\n     * A custom template to use for event titles\n     */\n    eventTitleTemplate: TemplateRef<any>;\n    /**\n     * A custom template to use for event actions\n     */\n    eventActionsTemplate: TemplateRef<any>;\n    /**\n     * The precision to display events.\n     * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding\n     */\n    precision: 'days' | 'minutes';\n    /**\n     * An array of day indexes (0 = sunday, 1 = monday etc) that indicate which days are weekends\n     */\n    weekendDays: number[];\n    /**\n     * Whether to snap events to a grid when dragging\n     */\n    snapDraggedEvents: boolean;\n    /**\n     * The number of segments in an hour. Must be <= 6\n     */\n    hourSegments: number;\n    /**\n     * The duration of each segment group in minutes\n     */\n    hourDuration: number;\n    /**\n     * The height in pixels of each hour segment\n     */\n    hourSegmentHeight: number;\n    /**\n     * The minimum height in pixels of each event\n     */\n    minimumEventHeight: number;\n    /**\n     * The day start hours in 24 hour time. Must be 0-23\n     */\n    dayStartHour: number;\n    /**\n     * The day start minutes. Must be 0-59\n     */\n    dayStartMinute: number;\n    /**\n     * The day end hours in 24 hour time. Must be 0-23\n     */\n    dayEndHour: number;\n    /**\n     * The day end minutes. Must be 0-59\n     */\n    dayEndMinute: number;\n    /**\n     * A custom template to use to replace the hour segment\n     */\n    hourSegmentTemplate: TemplateRef<any>;\n    /**\n     * The grid size to snap resizing and dragging of hourly events to\n     */\n    eventSnapSize: number;\n    /**\n     * A custom template to use for the all day events label text\n     */\n    allDayEventsLabelTemplate: TemplateRef<any>;\n    /**\n     * The number of days in a week. Can be used to create a shorter or longer week view.\n     * The first day of the week will always be the `viewDate` and `weekStartsOn` if set will be ignored\n     */\n    daysInWeek: number;\n    /**\n     * A custom template to use for the current time marker\n     */\n    currentTimeMarkerTemplate: TemplateRef<any>;\n    /**\n     * Allow you to customise where events can be dragged and resized to.\n     * Return true to allow dragging and resizing to the new location, or false to prevent it\n     */\n    validateEventTimesChanged: (event: CalendarEventTimesChangedEvent) => boolean;\n    /**\n     * Called when a header week day is clicked. Adding a `cssClass` property on `$event.day` will add that class to the header element\n     */\n    dayHeaderClicked: EventEmitter<{\n        day: WeekDay;\n        sourceEvent: MouseEvent;\n    }>;\n    /**\n     * Called when the event title is clicked\n     */\n    eventClicked: EventEmitter<{\n        event: CalendarEvent<any>;\n        sourceEvent: MouseEvent | KeyboardEvent;\n    }>;\n    /**\n     * Called when an event is resized or dragged and dropped\n     */\n    eventTimesChanged: EventEmitter<CalendarEventTimesChangedEvent<any>>;\n    /**\n     * An output that will be called before the view is rendered for the current week.\n     * If you add the `cssClass` property to a day in the header it will add that class to the cell element in the template\n     */\n    beforeViewRender: EventEmitter<CalendarWeekViewBeforeRenderEvent>;\n    /**\n     * Called when an hour segment is clicked\n     */\n    hourSegmentClicked: EventEmitter<{\n        date: Date;\n        sourceEvent: MouseEvent;\n    }>;\n    /**\n     * @hidden\n     */\n    days: WeekDay[];\n    /**\n     * @hidden\n     */\n    view: WeekView;\n    /**\n     * @hidden\n     */\n    refreshSubscription: Subscription;\n    /**\n     * @hidden\n     */\n    allDayEventResizes: Map<WeekViewAllDayEvent, WeekViewAllDayEventResize>;\n    /**\n     * @hidden\n     */\n    timeEventResizes: Map<CalendarEvent, ResizeEvent>;\n    /**\n     * @hidden\n     */\n    eventDragEnterByType: {\n        allDay: number;\n        time: number;\n    };\n    /**\n     * @hidden\n     */\n    dragActive: boolean;\n    /**\n     * @hidden\n     */\n    dragAlreadyMoved: boolean;\n    /**\n     * @hidden\n     */\n    validateDrag: ValidateDrag;\n    /**\n     * @hidden\n     */\n    validateResize: (args: any) => boolean;\n    /**\n     * @hidden\n     */\n    dayColumnWidth: number;\n    /**\n     * @hidden\n     */\n    calendarId: symbol;\n    /**\n     * @hidden\n     */\n    lastDraggedEvent: CalendarEvent;\n    /**\n     * @hidden\n     */\n    rtl: boolean;\n    /**\n     * @hidden\n     */\n    trackByWeekDayHeaderDate: (index: number, day: WeekDay) => string;\n    /**\n     * @hidden\n     */\n    trackByHourSegment: (index: number, segment: WeekViewHourSegment) => string;\n    /**\n     * @hidden\n     */\n    trackByHour: (index: number, hour: WeekViewHour) => string;\n    /**\n     * @hidden\n     */\n    trackByWeekAllDayEvent: (index: number, weekEvent: WeekViewAllDayEvent) => string | number | CalendarEvent<any>;\n    /**\n     * @hidden\n     */\n    trackByWeekTimeEvent: (index: number, weekEvent: WeekViewTimeEvent) => string | number | CalendarEvent<any>;\n    /**\n     * @hidden\n     */\n    private lastDragEnterDate;\n    /**\n     * @hidden\n     */\n    constructor(cdr: ChangeDetectorRef, utils: CalendarUtils, locale: string, dateAdapter: DateAdapter, element: ElementRef<HTMLElement>);\n    /**\n     * @hidden\n     */\n    trackByHourColumn: (index: number, column: WeekViewHourColumn) => string | WeekViewHourColumn;\n    /**\n     * @hidden\n     */\n    trackById: (index: number, row: WeekViewAllDayEventRow) => string;\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: any): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @hidden\n     */\n    timeEventResizeStarted(eventsContainer: HTMLElement, timeEvent: WeekViewTimeEvent, resizeEvent: ResizeEvent): void;\n    /**\n     * @hidden\n     */\n    timeEventResizing(timeEvent: WeekViewTimeEvent, resizeEvent: ResizeEvent): void;\n    /**\n     * @hidden\n     */\n    timeEventResizeEnded(timeEvent: WeekViewTimeEvent): void;\n    /**\n     * @hidden\n     */\n    allDayEventResizeStarted(allDayEventsContainer: HTMLElement, allDayEvent: WeekViewAllDayEvent, resizeEvent: ResizeEvent): void;\n    /**\n     * @hidden\n     */\n    allDayEventResizing(allDayEvent: WeekViewAllDayEvent, resizeEvent: ResizeEvent, dayWidth: number): void;\n    /**\n     * @hidden\n     */\n    allDayEventResizeEnded(allDayEvent: WeekViewAllDayEvent): void;\n    /**\n     * @hidden\n     */\n    getDayColumnWidth(eventRowContainer: HTMLElement): number;\n    /**\n     * @hidden\n     */\n    dateDragEnter(date: Date): void;\n    /**\n     * @hidden\n     */\n    eventDropped(dropEvent: DropEvent<{\n        event?: CalendarEvent;\n        calendarId?: symbol;\n    }>, date: Date, allDay: boolean): void;\n    /**\n     * @hidden\n     */\n    dragEnter(type: 'allDay' | 'time'): void;\n    /**\n     * @hidden\n     */\n    dragLeave(type: 'allDay' | 'time'): void;\n    /**\n     * @hidden\n     */\n    dragStarted(eventsContainerElement: HTMLElement, eventElement: HTMLElement, event: WeekViewTimeEvent | WeekViewAllDayEvent, useY: boolean): void;\n    /**\n     * @hidden\n     */\n    dragMove(dayEvent: WeekViewTimeEvent, dragEvent: DragMoveEvent): void;\n    /**\n     * @hidden\n     */\n    allDayEventDragMove(): void;\n    /**\n     * @hidden\n     */\n    dragEnded(weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent, dragEndEvent: DragEndEvent, dayWidth: number, useY?: boolean): void;\n    protected refreshHeader(): void;\n    protected refreshBody(): void;\n    protected refreshAll(): void;\n    protected emitBeforeViewRender(): void;\n    protected getWeekView(events: CalendarEvent[]): WeekView;\n    protected getDragMovedEventTimes(weekEvent: WeekViewAllDayEvent | WeekViewTimeEvent, dragEndEvent: DragEndEvent | DragMoveEvent, dayWidth: number, useY: boolean): {\n        start: Date;\n        end: Date;\n    };\n    protected restoreOriginalEvents(tempEvents: CalendarEvent[], adjustedEvents: Map<CalendarEvent, CalendarEvent>, snapDraggedEvents?: boolean): void;\n    protected getTimeEventResizedDates(calendarEvent: CalendarEvent, resizeEvent: ResizeEvent): {\n        start: Date;\n        end: Date;\n    };\n    protected resizeStarted(eventsContainer: HTMLElement, event: WeekViewTimeEvent | WeekViewAllDayEvent, dayWidth?: number): void;\n    /**\n     * @hidden\n     */\n    protected getAllDayEventResizedDates(event: CalendarEvent, daysDiff: number, beforeStart: boolean): {\n        start: Date;\n        end: Date;\n    };\n}\n"]}