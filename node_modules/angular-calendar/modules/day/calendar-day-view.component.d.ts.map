{"version":3,"file":"calendar-day-view.component.d.ts","sources":["calendar-day-view.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, TemplateRef } from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\nimport { Subject } from 'rxjs';\nimport { CalendarEventTimesChangedEvent } from '../common/calendar-event-times-changed-event.interface';\nimport { PlacementArray } from 'positioning';\nimport { CalendarWeekViewBeforeRenderEvent } from '../week/calendar-week.module';\nexport declare type CalendarDayViewBeforeRenderEvent = CalendarWeekViewBeforeRenderEvent;\n/**\n * Shows all events on a given day. Example usage:\n *\n * ```typescript\n * <mwl-calendar-day-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-day-view>\n * ```\n */\nexport declare class CalendarDayViewComponent {\n    /**\n     * The current view date\n     */\n    viewDate: Date;\n    /**\n     * An array of events to display on view\n     * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n     */\n    events: CalendarEvent[];\n    /**\n     * The number of segments in an hour. Must be <= 6\n     */\n    hourSegments: number;\n    /**\n     * The height in pixels of each hour segment\n     */\n    hourSegmentHeight: number;\n    /**\n     * The duration of each segment group in minutes\n     */\n    hourDuration: number;\n    /**\n     * The minimum height in pixels of each event\n     */\n    minimumEventHeight: number;\n    /**\n     * The day start hours in 24 hour time. Must be 0-23\n     */\n    dayStartHour: number;\n    /**\n     * The day start minutes. Must be 0-59\n     */\n    dayStartMinute: number;\n    /**\n     * The day end hours in 24 hour time. Must be 0-23\n     */\n    dayEndHour: number;\n    /**\n     * The day end minutes. Must be 0-59\n     */\n    dayEndMinute: number;\n    /**\n     * An observable that when emitted on will re-render the current view\n     */\n    refresh: Subject<any>;\n    /**\n     * The locale used to format dates\n     */\n    locale: string;\n    /**\n     * The grid size to snap resizing and dragging of events to\n     */\n    eventSnapSize: number;\n    /**\n     * The placement of the event tooltip\n     */\n    tooltipPlacement: PlacementArray;\n    /**\n     * A custom template to use for the event tooltips\n     */\n    tooltipTemplate: TemplateRef<any>;\n    /**\n     * Whether to append tooltips to the body or next to the trigger element\n     */\n    tooltipAppendToBody: boolean;\n    /**\n     * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n     * will be displayed immediately.\n     */\n    tooltipDelay: number | null;\n    /**\n     * A custom template to use to replace the hour segment\n     */\n    hourSegmentTemplate: TemplateRef<any>;\n    /**\n     * A custom template to use for day view events\n     */\n    eventTemplate: TemplateRef<any>;\n    /**\n     * A custom template to use for event titles\n     */\n    eventTitleTemplate: TemplateRef<any>;\n    /**\n     * A custom template to use for event actions\n     */\n    eventActionsTemplate: TemplateRef<any>;\n    /**\n     * Whether to snap events to a grid when dragging\n     */\n    snapDraggedEvents: boolean;\n    /**\n     * A custom template to use for the all day events label text\n     */\n    allDayEventsLabelTemplate: TemplateRef<any>;\n    /**\n     * A custom template to use for the current time marker\n     */\n    currentTimeMarkerTemplate: TemplateRef<any>;\n    /**\n     * Allow you to customise where events can be dragged and resized to.\n     * Return true to allow dragging and resizing to the new location, or false to prevent it\n     */\n    validateEventTimesChanged: (event: CalendarEventTimesChangedEvent) => boolean;\n    /**\n     * Called when an event title is clicked\n     */\n    eventClicked: EventEmitter<{\n        event: CalendarEvent<any>;\n    }>;\n    /**\n     * Called when an hour segment is clicked\n     */\n    hourSegmentClicked: EventEmitter<{\n        date: Date;\n    }>;\n    /**\n     * Called when an event is resized or dragged and dropped\n     */\n    eventTimesChanged: EventEmitter<CalendarEventTimesChangedEvent<any>>;\n    /**\n     * An output that will be called before the view is rendered for the current day.\n     * If you add the `cssClass` property to an hour grid segment it will add that class to the hour segment in the template\n     */\n    beforeViewRender: EventEmitter<CalendarWeekViewBeforeRenderEvent>;\n}\n"]}