import { __decorate } from "tslib";
import { Component, Input, NgZone, OnChanges, SimpleChanges, TemplateRef, } from '@angular/core';
import { BehaviorSubject, interval } from 'rxjs';
import { switchMapTo, startWith, map, switchMap } from 'rxjs/operators';
import { DateAdapter } from '../../date-adapters/date-adapter';
var CalendarWeekViewCurrentTimeMarkerComponent = /** @class */ (function () {
    function CalendarWeekViewCurrentTimeMarkerComponent(dateAdapter, zone) {
        var _this = this;
        this.dateAdapter = dateAdapter;
        this.zone = zone;
        this.columnDate$ = new BehaviorSubject(this.columnDate);
        this.marker$ = this.zone.onStable.pipe(switchMap(function () { return interval(60 * 1000); }), startWith(0), switchMapTo(this.columnDate$), map(function (columnDate) {
            var startOfDay = _this.dateAdapter.setMinutes(_this.dateAdapter.setHours(columnDate, _this.dayStartHour), _this.dayStartMinute);
            var endOfDay = _this.dateAdapter.setMinutes(_this.dateAdapter.setHours(columnDate, _this.dayEndHour), _this.dayEndMinute);
            var hourHeightModifier = (_this.hourSegments * _this.hourSegmentHeight) /
                (_this.hourDuration || 60);
            var now = new Date();
            return {
                isVisible: _this.dateAdapter.isSameDay(columnDate, now) &&
                    now >= startOfDay &&
                    now <= endOfDay,
                top: _this.dateAdapter.differenceInMinutes(now, startOfDay) *
                    hourHeightModifier,
            };
        }));
    }
    CalendarWeekViewCurrentTimeMarkerComponent.prototype.ngOnChanges = function (changes) {
        if (changes.columnDate) {
            this.columnDate$.next(changes.columnDate.currentValue);
        }
    };
    CalendarWeekViewCurrentTimeMarkerComponent.ctorParameters = function () { return [
        { type: DateAdapter },
        { type: NgZone }
    ]; };
    __decorate([
        Input()
    ], CalendarWeekViewCurrentTimeMarkerComponent.prototype, "columnDate", void 0);
    __decorate([
        Input()
    ], CalendarWeekViewCurrentTimeMarkerComponent.prototype, "dayStartHour", void 0);
    __decorate([
        Input()
    ], CalendarWeekViewCurrentTimeMarkerComponent.prototype, "dayStartMinute", void 0);
    __decorate([
        Input()
    ], CalendarWeekViewCurrentTimeMarkerComponent.prototype, "dayEndHour", void 0);
    __decorate([
        Input()
    ], CalendarWeekViewCurrentTimeMarkerComponent.prototype, "dayEndMinute", void 0);
    __decorate([
        Input()
    ], CalendarWeekViewCurrentTimeMarkerComponent.prototype, "hourSegments", void 0);
    __decorate([
        Input()
    ], CalendarWeekViewCurrentTimeMarkerComponent.prototype, "hourDuration", void 0);
    __decorate([
        Input()
    ], CalendarWeekViewCurrentTimeMarkerComponent.prototype, "hourSegmentHeight", void 0);
    __decorate([
        Input()
    ], CalendarWeekViewCurrentTimeMarkerComponent.prototype, "customTemplate", void 0);
    CalendarWeekViewCurrentTimeMarkerComponent = __decorate([
        Component({
            selector: 'mwl-calendar-week-view-current-time-marker',
            template: "\n    <ng-template\n      #defaultTemplate\n      let-columnDate=\"columnDate\"\n      let-dayStartHour=\"dayStartHour\"\n      let-dayStartMinute=\"dayStartMinute\"\n      let-dayEndHour=\"dayEndHour\"\n      let-dayEndMinute=\"dayEndMinute\"\n      let-isVisible=\"isVisible\"\n      let-topPx=\"topPx\"\n    >\n      <div\n        class=\"cal-current-time-marker\"\n        *ngIf=\"isVisible\"\n        [style.top.px]=\"topPx\"\n      ></div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        columnDate: columnDate,\n        dayStartHour: dayStartHour,\n        dayStartMinute: dayStartMinute,\n        dayEndHour: dayEndHour,\n        dayEndMinute: dayEndMinute,\n        isVisible: (marker$ | async)?.isVisible,\n        topPx: (marker$ | async)?.top\n      }\"\n    >\n    </ng-template>\n  "
        })
    ], CalendarWeekViewCurrentTimeMarkerComponent);
    return CalendarWeekViewCurrentTimeMarkerComponent;
}());
export { CalendarWeekViewCurrentTimeMarkerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItd2Vlay12aWV3LWN1cnJlbnQtdGltZS1tYXJrZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1jYWxlbmRhci8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvd2Vlay9jYWxlbmRhci13ZWVrLXZpZXctY3VycmVudC10aW1lLW1hcmtlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sRUFDTixTQUFTLEVBQ1QsYUFBYSxFQUNiLFdBQVcsR0FDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUM3RCxPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBb0MvRDtJQXFERSxvREFBb0IsV0FBd0IsRUFBVSxJQUFZO1FBQWxFLGlCQUFzRTtRQUFsRCxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUFVLFNBQUksR0FBSixJQUFJLENBQVE7UUFsQ2xFLGdCQUFXLEdBQUcsSUFBSSxlQUFlLENBQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXpELFlBQU8sR0FHRixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQzFCLFNBQVMsQ0FBQyxjQUFNLE9BQUEsUUFBUSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBbkIsQ0FBbUIsQ0FBQyxFQUNwQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQ1osV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFDN0IsR0FBRyxDQUFDLFVBQUMsVUFBVTtZQUNiLElBQU0sVUFBVSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUM1QyxLQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsS0FBSSxDQUFDLFlBQVksQ0FBQyxFQUN4RCxLQUFJLENBQUMsY0FBYyxDQUNwQixDQUFDO1lBQ0YsSUFBTSxRQUFRLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQzFDLEtBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxLQUFJLENBQUMsVUFBVSxDQUFDLEVBQ3RELEtBQUksQ0FBQyxZQUFZLENBQ2xCLENBQUM7WUFDRixJQUFNLGtCQUFrQixHQUN0QixDQUFDLEtBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSSxDQUFDLGlCQUFpQixDQUFDO2dCQUM1QyxDQUFDLEtBQUksQ0FBQyxZQUFZLElBQUksRUFBRSxDQUFDLENBQUM7WUFDNUIsSUFBTSxHQUFHLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUN2QixPQUFPO2dCQUNMLFNBQVMsRUFDUCxLQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDO29CQUMzQyxHQUFHLElBQUksVUFBVTtvQkFDakIsR0FBRyxJQUFJLFFBQVE7Z0JBQ2pCLEdBQUcsRUFDRCxLQUFJLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUM7b0JBQ3JELGtCQUFrQjthQUNyQixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUVtRSxDQUFDO0lBRXRFLGdFQUFXLEdBQVgsVUFBWSxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxVQUFVLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUN4RDtJQUNILENBQUM7O2dCQU5nQyxXQUFXO2dCQUFnQixNQUFNOztJQXBEekQ7UUFBUixLQUFLLEVBQUU7a0ZBQWtCO0lBRWpCO1FBQVIsS0FBSyxFQUFFO29GQUFzQjtJQUVyQjtRQUFSLEtBQUssRUFBRTtzRkFBd0I7SUFFdkI7UUFBUixLQUFLLEVBQUU7a0ZBQW9CO0lBRW5CO1FBQVIsS0FBSyxFQUFFO29GQUFzQjtJQUVyQjtRQUFSLEtBQUssRUFBRTtvRkFBc0I7SUFFckI7UUFBUixLQUFLLEVBQUU7b0ZBQXNCO0lBRXJCO1FBQVIsS0FBSyxFQUFFO3lGQUEyQjtJQUUxQjtRQUFSLEtBQUssRUFBRTtzRkFBa0M7SUFqQi9CLDBDQUEwQztRQWxDdEQsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLDRDQUE0QztZQUN0RCxRQUFRLEVBQUUsazRCQThCVDtTQUNGLENBQUM7T0FDVywwQ0FBMEMsQ0E0RHREO0lBQUQsaURBQUM7Q0FBQSxBQTVERCxJQTREQztTQTVEWSwwQ0FBMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBOZ1pvbmUsXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVGVtcGxhdGVSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBpbnRlcnZhbCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3dpdGNoTWFwVG8sIHN0YXJ0V2l0aCwgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBEYXRlQWRhcHRlciB9IGZyb20gJy4uLy4uL2RhdGUtYWRhcHRlcnMvZGF0ZS1hZGFwdGVyJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbXdsLWNhbGVuZGFyLXdlZWstdmlldy1jdXJyZW50LXRpbWUtbWFya2VyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bmctdGVtcGxhdGVcbiAgICAgICNkZWZhdWx0VGVtcGxhdGVcbiAgICAgIGxldC1jb2x1bW5EYXRlPVwiY29sdW1uRGF0ZVwiXG4gICAgICBsZXQtZGF5U3RhcnRIb3VyPVwiZGF5U3RhcnRIb3VyXCJcbiAgICAgIGxldC1kYXlTdGFydE1pbnV0ZT1cImRheVN0YXJ0TWludXRlXCJcbiAgICAgIGxldC1kYXlFbmRIb3VyPVwiZGF5RW5kSG91clwiXG4gICAgICBsZXQtZGF5RW5kTWludXRlPVwiZGF5RW5kTWludXRlXCJcbiAgICAgIGxldC1pc1Zpc2libGU9XCJpc1Zpc2libGVcIlxuICAgICAgbGV0LXRvcFB4PVwidG9wUHhcIlxuICAgID5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3M9XCJjYWwtY3VycmVudC10aW1lLW1hcmtlclwiXG4gICAgICAgICpuZ0lmPVwiaXNWaXNpYmxlXCJcbiAgICAgICAgW3N0eWxlLnRvcC5weF09XCJ0b3BQeFwiXG4gICAgICA+PC9kaXY+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbiAgICA8bmctdGVtcGxhdGVcbiAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImN1c3RvbVRlbXBsYXRlIHx8IGRlZmF1bHRUZW1wbGF0ZVwiXG4gICAgICBbbmdUZW1wbGF0ZU91dGxldENvbnRleHRdPVwie1xuICAgICAgICBjb2x1bW5EYXRlOiBjb2x1bW5EYXRlLFxuICAgICAgICBkYXlTdGFydEhvdXI6IGRheVN0YXJ0SG91cixcbiAgICAgICAgZGF5U3RhcnRNaW51dGU6IGRheVN0YXJ0TWludXRlLFxuICAgICAgICBkYXlFbmRIb3VyOiBkYXlFbmRIb3VyLFxuICAgICAgICBkYXlFbmRNaW51dGU6IGRheUVuZE1pbnV0ZSxcbiAgICAgICAgaXNWaXNpYmxlOiAobWFya2VyJCB8IGFzeW5jKT8uaXNWaXNpYmxlLFxuICAgICAgICB0b3BQeDogKG1hcmtlciQgfCBhc3luYyk/LnRvcFxuICAgICAgfVwiXG4gICAgPlxuICAgIDwvbmctdGVtcGxhdGU+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIENhbGVuZGFyV2Vla1ZpZXdDdXJyZW50VGltZU1hcmtlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIGNvbHVtbkRhdGU6IERhdGU7XG5cbiAgQElucHV0KCkgZGF5U3RhcnRIb3VyOiBudW1iZXI7XG5cbiAgQElucHV0KCkgZGF5U3RhcnRNaW51dGU6IG51bWJlcjtcblxuICBASW5wdXQoKSBkYXlFbmRIb3VyOiBudW1iZXI7XG5cbiAgQElucHV0KCkgZGF5RW5kTWludXRlOiBudW1iZXI7XG5cbiAgQElucHV0KCkgaG91clNlZ21lbnRzOiBudW1iZXI7XG5cbiAgQElucHV0KCkgaG91ckR1cmF0aW9uOiBudW1iZXI7XG5cbiAgQElucHV0KCkgaG91clNlZ21lbnRIZWlnaHQ6IG51bWJlcjtcblxuICBASW5wdXQoKSBjdXN0b21UZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICBjb2x1bW5EYXRlJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8RGF0ZT4odGhpcy5jb2x1bW5EYXRlKTtcblxuICBtYXJrZXIkOiBPYnNlcnZhYmxlPHtcbiAgICBpc1Zpc2libGU6IGJvb2xlYW47XG4gICAgdG9wOiBudW1iZXI7XG4gIH0+ID0gdGhpcy56b25lLm9uU3RhYmxlLnBpcGUoXG4gICAgc3dpdGNoTWFwKCgpID0+IGludGVydmFsKDYwICogMTAwMCkpLFxuICAgIHN0YXJ0V2l0aCgwKSxcbiAgICBzd2l0Y2hNYXBUbyh0aGlzLmNvbHVtbkRhdGUkKSxcbiAgICBtYXAoKGNvbHVtbkRhdGUpID0+IHtcbiAgICAgIGNvbnN0IHN0YXJ0T2ZEYXkgPSB0aGlzLmRhdGVBZGFwdGVyLnNldE1pbnV0ZXMoXG4gICAgICAgIHRoaXMuZGF0ZUFkYXB0ZXIuc2V0SG91cnMoY29sdW1uRGF0ZSwgdGhpcy5kYXlTdGFydEhvdXIpLFxuICAgICAgICB0aGlzLmRheVN0YXJ0TWludXRlXG4gICAgICApO1xuICAgICAgY29uc3QgZW5kT2ZEYXkgPSB0aGlzLmRhdGVBZGFwdGVyLnNldE1pbnV0ZXMoXG4gICAgICAgIHRoaXMuZGF0ZUFkYXB0ZXIuc2V0SG91cnMoY29sdW1uRGF0ZSwgdGhpcy5kYXlFbmRIb3VyKSxcbiAgICAgICAgdGhpcy5kYXlFbmRNaW51dGVcbiAgICAgICk7XG4gICAgICBjb25zdCBob3VySGVpZ2h0TW9kaWZpZXIgPVxuICAgICAgICAodGhpcy5ob3VyU2VnbWVudHMgKiB0aGlzLmhvdXJTZWdtZW50SGVpZ2h0KSAvXG4gICAgICAgICh0aGlzLmhvdXJEdXJhdGlvbiB8fCA2MCk7XG4gICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNWaXNpYmxlOlxuICAgICAgICAgIHRoaXMuZGF0ZUFkYXB0ZXIuaXNTYW1lRGF5KGNvbHVtbkRhdGUsIG5vdykgJiZcbiAgICAgICAgICBub3cgPj0gc3RhcnRPZkRheSAmJlxuICAgICAgICAgIG5vdyA8PSBlbmRPZkRheSxcbiAgICAgICAgdG9wOlxuICAgICAgICAgIHRoaXMuZGF0ZUFkYXB0ZXIuZGlmZmVyZW5jZUluTWludXRlcyhub3csIHN0YXJ0T2ZEYXkpICpcbiAgICAgICAgICBob3VySGVpZ2h0TW9kaWZpZXIsXG4gICAgICB9O1xuICAgIH0pXG4gICk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkYXRlQWRhcHRlcjogRGF0ZUFkYXB0ZXIsIHByaXZhdGUgem9uZTogTmdab25lKSB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5jb2x1bW5EYXRlKSB7XG4gICAgICB0aGlzLmNvbHVtbkRhdGUkLm5leHQoY2hhbmdlcy5jb2x1bW5EYXRlLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG59XG4iXX0=