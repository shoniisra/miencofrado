(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ngx-loading-bar/core', ['exports', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory((global['ngx-loading-bar'] = global['ngx-loading-bar'] || {}, global['ngx-loading-bar'].core = {}), global.ng.core, global.ng.common, global.rxjs, global.rxjs.operators));
}(this, (function (exports, core, common, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var LoadingBarState = /** @class */ (function () {
        function LoadingBarState(config) {
            var _this = this;
            if (config === void 0) { config = {}; }
            this.config = config;
            this.state = {
                action: null,
                value: 0,
                initialValue: 0,
            };
            this.requests = null;
            this.disabled = false;
            this.stream$ = new rxjs.Subject();
            this._value$ = null;
            this.timer$ = function (s) {
                var state$ = rxjs.of(s);
                switch (s.action) {
                    case 'start':
                    case 'increment':
                    case 'set': {
                        if (s.action === 'start' && _this.config.latencyThreshold === 0 && s.value === 0) {
                            s.value = s.initialValue;
                        }
                        if (_this.requests > 0) {
                            state$ = rxjs.timer(_this.config.latencyThreshold, 250).pipe(operators.map(function (t) { return (__assign(__assign({}, s), { value: t === 0 ? _this.state.value || s.initialValue : _this._increment() })); }));
                        }
                        break;
                    }
                    case 'complete':
                    case 'stop': {
                        // Attempt to aggregate any start/complete calls within 500ms:
                        state$ =
                            s.value === 0
                                ? rxjs.of(__assign({}, s))
                                : rxjs.timer(0, 500).pipe(operators.take(2), operators.map(function (t) { return ({ value: t === 0 ? 100 : 0 }); }));
                        break;
                    }
                }
                return state$.pipe(operators.map(function (next) { return (__assign(__assign({}, next), { action: 'set' })); }), operators.tap(function (next) { return _this.next(next, false); }));
            };
            this.config = __assign({ latencyThreshold: 0 }, config);
        }
        Object.defineProperty(LoadingBarState.prototype, "value$", {
            get: function () {
                var _this = this;
                if (this._value$) {
                    return this._value$;
                }
                return (this._value$ = this.stream$.asObservable().pipe(operators.startWith(this.state), operators.switchMap(function (s) { return _this.timer$(s); }), operators.shareReplay(), operators.map(function (s) { return s.value; })));
            },
            enumerable: true,
            configurable: true
        });
        LoadingBarState.prototype.start = function (initialValue) {
            if (initialValue === void 0) { initialValue = 2; }
            if (this.disabled) {
                return;
            }
            this.next({ action: 'start', initialValue: initialValue });
        };
        LoadingBarState.prototype.stop = function () {
            this.next({ action: 'stop' });
        };
        LoadingBarState.prototype.complete = function () {
            this.next({ action: 'complete' });
        };
        LoadingBarState.prototype.disable = function () {
            this.disabled = true;
        };
        LoadingBarState.prototype.set = function (value) {
            this.next({ action: 'set', value: value });
        };
        LoadingBarState.prototype.increment = function (value) {
            if (value === void 0) { value = 0; }
            this.next({ action: 'increment', value: value });
        };
        LoadingBarState.prototype.next = function (state, emitEvent) {
            if (emitEvent === void 0) { emitEvent = true; }
            switch (state.action) {
                case 'start':
                    this.requests = (this.requests || 0) + 1;
                    break;
                case 'complete':
                    this.requests = (this.requests || 1) - 1;
                    if (this.requests > 0) {
                        return;
                    }
                    break;
                case 'stop':
                    this.requests = 0;
                    break;
                case 'increment':
                    state.value = this._increment(state.value);
                    break;
            }
            this.state = __assign(__assign(__assign({}, this.state), { action: null }), state);
            if (emitEvent) {
                this.stream$.next(this.state);
            }
        };
        LoadingBarState.prototype._increment = function (rnd) {
            if (rnd === void 0) { rnd = 0; }
            var stat = this.state.value;
            if (stat >= 99) {
                rnd = 0;
            }
            if (rnd === 0) {
                if (stat >= 0 && stat < 25) {
                    // Start out between 3 - 6% increments
                    rnd = Math.random() * (5 - 3 + 1) + 3;
                }
                else if (stat >= 25 && stat < 65) {
                    // increment between 0 - 3%
                    rnd = Math.random() * 3;
                }
                else if (stat >= 65 && stat < 90) {
                    // increment between 0 - 2%
                    rnd = Math.random() * 2;
                }
                else if (stat >= 90 && stat < 99) {
                    // finally, increment it .5 %
                    rnd = 0.5;
                }
                else {
                    // after 99%, don't increment:
                    rnd = 0;
                }
            }
            return rnd + stat;
        };
        return LoadingBarState;
    }());

    var LOADING_BAR_CONFIG = new core.InjectionToken('LOADING_BAR_CONFIG');

    var LoadingBarService = /** @class */ (function () {
        function LoadingBarService(platformId, config) {
            var _this = this;
            if (config === void 0) { config = {}; }
            this.platformId = platformId;
            this.config = config;
            this.refs = {};
            this.streams$ = new rxjs.Subject();
            this.value$ = this.streams$.asObservable().pipe(operators.startWith(null), operators.switchMap(function () { return rxjs.combineLatest.apply(void 0, __spread(Object.keys(_this.refs).map(function (s) { return _this.refs[s].value$; }))); }), operators.map(function (v) { return Math.max.apply(Math, __spread([0], v)); }));
        }
        Object.defineProperty(LoadingBarService.prototype, "progress$", {
            /** @deprecated use `value$` instead. */
            get: function () {
                return this.value$;
            },
            enumerable: true,
            configurable: true
        });
        /** @deprecated use `useRef` instead. */
        LoadingBarService.prototype.start = function (initialValue) {
            if (initialValue === void 0) { initialValue = 2; }
            this.useRef().start(initialValue);
        };
        /** @deprecated use `useRef` instead. */
        LoadingBarService.prototype.set = function (value) {
            this.useRef().set(value);
        };
        /** @deprecated use `useRef` instead. */
        LoadingBarService.prototype.increment = function (value) {
            this.useRef().increment(value);
        };
        /** @deprecated use `useRef` instead. */
        LoadingBarService.prototype.complete = function () {
            this.useRef().complete();
        };
        /** @deprecated use `useRef` instead. */
        LoadingBarService.prototype.stop = function () {
            this.useRef().stop();
        };
        LoadingBarService.prototype.useRef = function (id) {
            if (id === void 0) { id = 'default'; }
            if (!this.refs[id]) {
                this.refs[id] = new LoadingBarState(this.config);
                this.streams$.next();
                if (!common.isPlatformBrowser(this.platformId)) {
                    this.refs[id].disable();
                }
            }
            return this.refs[id];
        };
        LoadingBarService.ctorParameters = function () { return [
            { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [LOADING_BAR_CONFIG,] }] }
        ]; };
        LoadingBarService.ɵprov = core["ɵɵdefineInjectable"]({ factory: function LoadingBarService_Factory() { return new LoadingBarService(core["ɵɵinject"](core.PLATFORM_ID), core["ɵɵinject"](LOADING_BAR_CONFIG, 8)); }, token: LoadingBarService, providedIn: "root" });
        LoadingBarService = __decorate([
            core.Injectable({ providedIn: 'root' }),
            __param(0, core.Inject(core.PLATFORM_ID)),
            __param(1, core.Optional()), __param(1, core.Inject(LOADING_BAR_CONFIG)),
            __metadata("design:paramtypes", [Object, Object])
        ], LoadingBarService);
        return LoadingBarService;
    }());

    var LoadingBarComponent = /** @class */ (function () {
        function LoadingBarComponent(loader) {
            this.loader = loader;
            this.includeSpinner = true;
            this.includeBar = true;
            this.fixed = true;
            this.color = '#29d';
        }
        Object.defineProperty(LoadingBarComponent.prototype, "value$", {
            get: function () {
                return this.ref ? this.loader.useRef(this.ref).value$ : this.loader.value$;
            },
            enumerable: true,
            configurable: true
        });
        LoadingBarComponent.ctorParameters = function () { return [
            { type: LoadingBarService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LoadingBarComponent.prototype, "includeSpinner", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LoadingBarComponent.prototype, "includeBar", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LoadingBarComponent.prototype, "fixed", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LoadingBarComponent.prototype, "color", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], LoadingBarComponent.prototype, "value", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LoadingBarComponent.prototype, "ref", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LoadingBarComponent.prototype, "height", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LoadingBarComponent.prototype, "diameter", void 0);
        LoadingBarComponent = __decorate([
            core.Component({
                selector: 'ngx-loading-bar',
                template: "\n    <ng-container *ngIf=\"value != null ? value : (value$ | async) as progress\">\n      <div *ngIf=\"includeSpinner\" class=\"ngx-spinner\">\n        <div [style.width]=\"diameter\" [style.height]=\"diameter\" class=\"ngx-spinner-icon\"></div>\n      </div>\n      <div\n        *ngIf=\"includeBar\"\n        class=\"ngx-bar\"\n        [style.background]=\"color\"\n        [style.height]=\"height\"\n        [style.width]=\"progress + '%'\"\n      ></div>\n    </ng-container>\n  ",
                preserveWhitespaces: false,
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                encapsulation: core.ViewEncapsulation.Emulated,
                host: {
                    '[attr.fixed]': 'fixed',
                    '[style.color]': 'color',
                },
                styles: [":host{position:relative;display:block;pointer-events:none}:host .ngx-spinner{transition:350ms linear;display:block;position:absolute;top:5px;left:0}:host .ngx-spinner .ngx-spinner-icon{width:14px;height:14px;border:2px solid transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;-webkit-animation:.4s linear infinite loading-bar-spinner;animation:.4s linear infinite loading-bar-spinner}:host .ngx-bar{transition:width 350ms;position:absolute;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}[dir=rtl] :host .ngx-bar{right:0;left:unset}:host[fixed=true]{z-index:10002}:host[fixed=true] .ngx-bar{position:fixed}:host[fixed=true] .ngx-spinner{position:fixed;top:10px;left:10px}[dir=rtl] :host[fixed=true] .ngx-spinner{right:10px;left:unset}@-webkit-keyframes loading-bar-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes loading-bar-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}"]
            }),
            __metadata("design:paramtypes", [LoadingBarService])
        ], LoadingBarComponent);
        return LoadingBarComponent;
    }());

    var LoadingBarModule = /** @class */ (function () {
        function LoadingBarModule() {
        }
        LoadingBarModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                declarations: [LoadingBarComponent],
                exports: [LoadingBarComponent],
            })
        ], LoadingBarModule);
        return LoadingBarModule;
    }());

    exports.LOADING_BAR_CONFIG = LOADING_BAR_CONFIG;
    exports.LoadingBarComponent = LoadingBarComponent;
    exports.LoadingBarModule = LoadingBarModule;
    exports.LoadingBarService = LoadingBarService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-loading-bar-core.umd.js.map
