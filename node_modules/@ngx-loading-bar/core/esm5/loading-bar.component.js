import { __decorate, __metadata } from "tslib";
import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';
import { LoadingBarService } from './loading-bar.service';
var LoadingBarComponent = /** @class */ (function () {
    function LoadingBarComponent(loader) {
        this.loader = loader;
        this.includeSpinner = true;
        this.includeBar = true;
        this.fixed = true;
        this.color = '#29d';
    }
    Object.defineProperty(LoadingBarComponent.prototype, "value$", {
        get: function () {
            return this.ref ? this.loader.useRef(this.ref).value$ : this.loader.value$;
        },
        enumerable: true,
        configurable: true
    });
    LoadingBarComponent.ctorParameters = function () { return [
        { type: LoadingBarService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LoadingBarComponent.prototype, "includeSpinner", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LoadingBarComponent.prototype, "includeBar", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LoadingBarComponent.prototype, "fixed", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LoadingBarComponent.prototype, "color", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], LoadingBarComponent.prototype, "value", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], LoadingBarComponent.prototype, "ref", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], LoadingBarComponent.prototype, "height", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], LoadingBarComponent.prototype, "diameter", void 0);
    LoadingBarComponent = __decorate([
        Component({
            selector: 'ngx-loading-bar',
            template: "\n    <ng-container *ngIf=\"value != null ? value : (value$ | async) as progress\">\n      <div *ngIf=\"includeSpinner\" class=\"ngx-spinner\">\n        <div [style.width]=\"diameter\" [style.height]=\"diameter\" class=\"ngx-spinner-icon\"></div>\n      </div>\n      <div\n        *ngIf=\"includeBar\"\n        class=\"ngx-bar\"\n        [style.background]=\"color\"\n        [style.height]=\"height\"\n        [style.width]=\"progress + '%'\"\n      ></div>\n    </ng-container>\n  ",
            preserveWhitespaces: false,
            changeDetection: ChangeDetectionStrategy.OnPush,
            encapsulation: ViewEncapsulation.Emulated,
            host: {
                '[attr.fixed]': 'fixed',
                '[style.color]': 'color',
            },
            styles: [":host{position:relative;display:block;pointer-events:none}:host .ngx-spinner{transition:350ms linear;display:block;position:absolute;top:5px;left:0}:host .ngx-spinner .ngx-spinner-icon{width:14px;height:14px;border:2px solid transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;-webkit-animation:.4s linear infinite loading-bar-spinner;animation:.4s linear infinite loading-bar-spinner}:host .ngx-bar{transition:width 350ms;position:absolute;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}[dir=rtl] :host .ngx-bar{right:0;left:unset}:host[fixed=true]{z-index:10002}:host[fixed=true] .ngx-bar{position:fixed}:host[fixed=true] .ngx-spinner{position:fixed;top:10px;left:10px}[dir=rtl] :host[fixed=true] .ngx-spinner{right:10px;left:unset}@-webkit-keyframes loading-bar-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes loading-bar-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}"]
        }),
        __metadata("design:paramtypes", [LoadingBarService])
    ], LoadingBarComponent);
    return LoadingBarComponent;
}());
export { LoadingBarComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy1iYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1sb2FkaW5nLWJhci9jb3JlLyIsInNvdXJjZXMiOlsibG9hZGluZy1iYXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQTJCMUQ7SUFjRSw2QkFBb0IsTUFBeUI7UUFBekIsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7UUFicEMsbUJBQWMsR0FBRyxJQUFJLENBQUM7UUFDdEIsZUFBVSxHQUFHLElBQUksQ0FBQztRQUNsQixVQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2IsVUFBSyxHQUFHLE1BQU0sQ0FBQztJQVV3QixDQUFDO0lBSmpELHNCQUFJLHVDQUFNO2FBQVY7WUFDRSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzdFLENBQUM7OztPQUFBOztnQkFFMkIsaUJBQWlCOztJQWJwQztRQUFSLEtBQUssRUFBRTs7K0RBQXVCO0lBQ3RCO1FBQVIsS0FBSyxFQUFFOzsyREFBbUI7SUFDbEI7UUFBUixLQUFLLEVBQUU7O3NEQUFjO0lBQ2I7UUFBUixLQUFLLEVBQUU7O3NEQUFnQjtJQUNmO1FBQVIsS0FBSyxFQUFFOztzREFBZTtJQUNkO1FBQVIsS0FBSyxFQUFFOztvREFBYTtJQUNaO1FBQVIsS0FBSyxFQUFFOzt1REFBZ0I7SUFDZjtRQUFSLEtBQUssRUFBRTs7eURBQWtCO0lBUmYsbUJBQW1CO1FBekIvQixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLFFBQVEsRUFBRSxzZUFhVDtZQUNELG1CQUFtQixFQUFFLEtBQUs7WUFDMUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07WUFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLFFBQVE7WUFFekMsSUFBSSxFQUFFO2dCQUNKLGNBQWMsRUFBRSxPQUFPO2dCQUN2QixlQUFlLEVBQUUsT0FBTzthQUN6Qjs7U0FDRixDQUFDO3lDQWU0QixpQkFBaUI7T0FkbEMsbUJBQW1CLENBZS9CO0lBQUQsMEJBQUM7Q0FBQSxBQWZELElBZUM7U0FmWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBWaWV3RW5jYXBzdWxhdGlvbiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvYWRpbmdCYXJTZXJ2aWNlIH0gZnJvbSAnLi9sb2FkaW5nLWJhci5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LWxvYWRpbmctYmFyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwidmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogKHZhbHVlJCB8IGFzeW5jKSBhcyBwcm9ncmVzc1wiPlxuICAgICAgPGRpdiAqbmdJZj1cImluY2x1ZGVTcGlubmVyXCIgY2xhc3M9XCJuZ3gtc3Bpbm5lclwiPlxuICAgICAgICA8ZGl2IFtzdHlsZS53aWR0aF09XCJkaWFtZXRlclwiIFtzdHlsZS5oZWlnaHRdPVwiZGlhbWV0ZXJcIiBjbGFzcz1cIm5neC1zcGlubmVyLWljb25cIj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdlxuICAgICAgICAqbmdJZj1cImluY2x1ZGVCYXJcIlxuICAgICAgICBjbGFzcz1cIm5neC1iYXJcIlxuICAgICAgICBbc3R5bGUuYmFja2dyb3VuZF09XCJjb2xvclwiXG4gICAgICAgIFtzdHlsZS5oZWlnaHRdPVwiaGVpZ2h0XCJcbiAgICAgICAgW3N0eWxlLndpZHRoXT1cInByb2dyZXNzICsgJyUnXCJcbiAgICAgID48L2Rpdj5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgYCxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5FbXVsYXRlZCxcbiAgc3R5bGVVcmxzOiBbJy4vbG9hZGluZy1iYXIuY29tcG9uZW50LnNjc3MnXSxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5maXhlZF0nOiAnZml4ZWQnLFxuICAgICdbc3R5bGUuY29sb3JdJzogJ2NvbG9yJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgTG9hZGluZ0JhckNvbXBvbmVudCB7XG4gIEBJbnB1dCgpIGluY2x1ZGVTcGlubmVyID0gdHJ1ZTtcbiAgQElucHV0KCkgaW5jbHVkZUJhciA9IHRydWU7XG4gIEBJbnB1dCgpIGZpeGVkID0gdHJ1ZTtcbiAgQElucHV0KCkgY29sb3IgPSAnIzI5ZCc7XG4gIEBJbnB1dCgpIHZhbHVlOiBudW1iZXI7XG4gIEBJbnB1dCgpIHJlZjogc3RyaW5nO1xuICBASW5wdXQoKSBoZWlnaHQ6IHN0cmluZztcbiAgQElucHV0KCkgZGlhbWV0ZXI6IHN0cmluZztcblxuICBnZXQgdmFsdWUkKCkge1xuICAgIHJldHVybiB0aGlzLnJlZiA/IHRoaXMubG9hZGVyLnVzZVJlZih0aGlzLnJlZikudmFsdWUkIDogdGhpcy5sb2FkZXIudmFsdWUkO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsb2FkZXI6IExvYWRpbmdCYXJTZXJ2aWNlKSB7fVxufVxuIl19