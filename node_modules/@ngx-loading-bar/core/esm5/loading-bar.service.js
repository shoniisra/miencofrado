import { __decorate, __metadata, __param, __read, __spread } from "tslib";
import { Injectable, Optional } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { LoadingBarState } from './loading-bar.state';
import { Subject, combineLatest } from 'rxjs';
import { switchMap, map, startWith } from 'rxjs/operators';
import { LOADING_BAR_CONFIG } from './loading-bar.config';
import * as i0 from "@angular/core";
import * as i1 from "./loading-bar.config";
var LoadingBarService = /** @class */ (function () {
    function LoadingBarService(platformId, config) {
        var _this = this;
        if (config === void 0) { config = {}; }
        this.platformId = platformId;
        this.config = config;
        this.refs = {};
        this.streams$ = new Subject();
        this.value$ = this.streams$.asObservable().pipe(startWith(null), switchMap(function () { return combineLatest.apply(void 0, __spread(Object.keys(_this.refs).map(function (s) { return _this.refs[s].value$; }))); }), map(function (v) { return Math.max.apply(Math, __spread([0], v)); }));
    }
    Object.defineProperty(LoadingBarService.prototype, "progress$", {
        /** @deprecated use `value$` instead. */
        get: function () {
            return this.value$;
        },
        enumerable: true,
        configurable: true
    });
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.start = function (initialValue) {
        if (initialValue === void 0) { initialValue = 2; }
        this.useRef().start(initialValue);
    };
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.set = function (value) {
        this.useRef().set(value);
    };
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.increment = function (value) {
        this.useRef().increment(value);
    };
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.complete = function () {
        this.useRef().complete();
    };
    /** @deprecated use `useRef` instead. */
    LoadingBarService.prototype.stop = function () {
        this.useRef().stop();
    };
    LoadingBarService.prototype.useRef = function (id) {
        if (id === void 0) { id = 'default'; }
        if (!this.refs[id]) {
            this.refs[id] = new LoadingBarState(this.config);
            this.streams$.next();
            if (!isPlatformBrowser(this.platformId)) {
                this.refs[id].disable();
            }
        }
        return this.refs[id];
    };
    LoadingBarService.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LOADING_BAR_CONFIG,] }] }
    ]; };
    LoadingBarService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LoadingBarService_Factory() { return new LoadingBarService(i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(i1.LOADING_BAR_CONFIG, 8)); }, token: LoadingBarService, providedIn: "root" });
    LoadingBarService = __decorate([
        Injectable({ providedIn: 'root' }),
        __param(0, Inject(PLATFORM_ID)),
        __param(1, Optional()), __param(1, Inject(LOADING_BAR_CONFIG)),
        __metadata("design:paramtypes", [Object, Object])
    ], LoadingBarService);
    return LoadingBarService;
}());
export { LoadingBarService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy1iYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtbG9hZGluZy1iYXIvY29yZS8iLCJzb3VyY2VzIjpbImxvYWRpbmctYmFyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWtCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGtCQUFrQixFQUFvQixNQUFNLHNCQUFzQixDQUFDOzs7QUFHNUU7SUFjRSwyQkFDK0IsVUFBa0IsRUFDQyxNQUE2QjtRQUYvRSxpQkFHSTtRQUQ4Qyx1QkFBQSxFQUFBLFdBQTZCO1FBRGhELGVBQVUsR0FBVixVQUFVLENBQVE7UUFDQyxXQUFNLEdBQU4sTUFBTSxDQUF1QjtRQWZ2RSxTQUFJLEdBQXNDLEVBQUUsQ0FBQztRQUM3QyxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUM5QixXQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQ2pELFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFDZixTQUFTLENBQUMsY0FBTSxPQUFBLGFBQWEsd0JBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsS0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQW5CLENBQW1CLENBQUMsSUFBdkUsQ0FBd0UsQ0FBQyxFQUN6RixHQUFHLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxJQUFJLENBQUMsR0FBRyxPQUFSLElBQUksWUFBSyxDQUFDLEdBQUssQ0FBQyxJQUFoQixDQUFpQixDQUFDLENBQzlCLENBQUM7SUFVQyxDQUFDO0lBUEosc0JBQUksd0NBQVM7UUFEYix3Q0FBd0M7YUFDeEM7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckIsQ0FBQzs7O09BQUE7SUFPRCx3Q0FBd0M7SUFDeEMsaUNBQUssR0FBTCxVQUFNLFlBQWdCO1FBQWhCLDZCQUFBLEVBQUEsZ0JBQWdCO1FBQ3BCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELHdDQUF3QztJQUN4QywrQkFBRyxHQUFILFVBQUksS0FBYTtRQUNmLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELHdDQUF3QztJQUN4QyxxQ0FBUyxHQUFULFVBQVUsS0FBYztRQUN0QixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCx3Q0FBd0M7SUFDeEMsb0NBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQsd0NBQXdDO0lBQ3hDLGdDQUFJLEdBQUo7UUFDRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVELGtDQUFNLEdBQU4sVUFBTyxFQUFzQjtRQUF0QixtQkFBQSxFQUFBLGNBQXNCO1FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2pELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFckIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDdkMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUN6QjtTQUNGO1FBRUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7O2dCQXhDMEMsTUFBTSx1QkFBOUMsTUFBTSxTQUFDLFdBQVc7Z0RBQ2xCLFFBQVEsWUFBSSxNQUFNLFNBQUMsa0JBQWtCOzs7SUFoQjdCLGlCQUFpQjtRQUQ3QixVQUFVLENBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUM7UUFnQjlCLFdBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ25CLFdBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxXQUFBLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO3lDQURFLE1BQU07T0FmdEMsaUJBQWlCLENBd0Q3Qjs0QkFqRUQ7Q0FpRUMsQUF4REQsSUF3REM7U0F4RFksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQTEFURk9STV9JRCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBMb2FkaW5nQmFyU3RhdGUgfSBmcm9tICcuL2xvYWRpbmctYmFyLnN0YXRlJztcbmltcG9ydCB7IFN1YmplY3QsIGNvbWJpbmVMYXRlc3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHN3aXRjaE1hcCwgbWFwLCBzdGFydFdpdGggfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBMT0FESU5HX0JBUl9DT05GSUcsIExvYWRpbmdCYXJDb25maWcgfSBmcm9tICcuL2xvYWRpbmctYmFyLmNvbmZpZyc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgTG9hZGluZ0JhclNlcnZpY2Uge1xuICBwcml2YXRlIHJlZnM6IHsgW2lkOiBzdHJpbmddOiBMb2FkaW5nQmFyU3RhdGUgfSA9IHt9O1xuICBwcml2YXRlIHN0cmVhbXMkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgcmVhZG9ubHkgdmFsdWUkID0gdGhpcy5zdHJlYW1zJC5hc09ic2VydmFibGUoKS5waXBlKFxuICAgIHN0YXJ0V2l0aChudWxsKSxcbiAgICBzd2l0Y2hNYXAoKCkgPT4gY29tYmluZUxhdGVzdCguLi5PYmplY3Qua2V5cyh0aGlzLnJlZnMpLm1hcCgocykgPT4gdGhpcy5yZWZzW3NdLnZhbHVlJCkpKSxcbiAgICBtYXAoKHYpID0+IE1hdGgubWF4KDAsIC4uLnYpKSxcbiAgKTtcblxuICAvKiogQGRlcHJlY2F0ZWQgdXNlIGB2YWx1ZSRgIGluc3RlYWQuICovXG4gIGdldCBwcm9ncmVzcyQoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWUkO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBPYmplY3QsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChMT0FESU5HX0JBUl9DT05GSUcpIHByaXZhdGUgY29uZmlnOiBMb2FkaW5nQmFyQ29uZmlnID0ge30sXG4gICkge31cblxuICAvKiogQGRlcHJlY2F0ZWQgdXNlIGB1c2VSZWZgIGluc3RlYWQuICovXG4gIHN0YXJ0KGluaXRpYWxWYWx1ZSA9IDIpIHtcbiAgICB0aGlzLnVzZVJlZigpLnN0YXJ0KGluaXRpYWxWYWx1ZSk7XG4gIH1cblxuICAvKiogQGRlcHJlY2F0ZWQgdXNlIGB1c2VSZWZgIGluc3RlYWQuICovXG4gIHNldCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy51c2VSZWYoKS5zZXQodmFsdWUpO1xuICB9XG5cbiAgLyoqIEBkZXByZWNhdGVkIHVzZSBgdXNlUmVmYCBpbnN0ZWFkLiAqL1xuICBpbmNyZW1lbnQodmFsdWU/OiBudW1iZXIpIHtcbiAgICB0aGlzLnVzZVJlZigpLmluY3JlbWVudCh2YWx1ZSk7XG4gIH1cblxuICAvKiogQGRlcHJlY2F0ZWQgdXNlIGB1c2VSZWZgIGluc3RlYWQuICovXG4gIGNvbXBsZXRlKCkge1xuICAgIHRoaXMudXNlUmVmKCkuY29tcGxldGUoKTtcbiAgfVxuXG4gIC8qKiBAZGVwcmVjYXRlZCB1c2UgYHVzZVJlZmAgaW5zdGVhZC4gKi9cbiAgc3RvcCgpIHtcbiAgICB0aGlzLnVzZVJlZigpLnN0b3AoKTtcbiAgfVxuXG4gIHVzZVJlZihpZDogc3RyaW5nID0gJ2RlZmF1bHQnKTogTG9hZGluZ0JhclN0YXRlIHtcbiAgICBpZiAoIXRoaXMucmVmc1tpZF0pIHtcbiAgICAgIHRoaXMucmVmc1tpZF0gPSBuZXcgTG9hZGluZ0JhclN0YXRlKHRoaXMuY29uZmlnKTtcbiAgICAgIHRoaXMuc3RyZWFtcyQubmV4dCgpO1xuXG4gICAgICBpZiAoIWlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgICAgdGhpcy5yZWZzW2lkXS5kaXNhYmxlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVmc1tpZF07XG4gIH1cbn1cbiJdfQ==