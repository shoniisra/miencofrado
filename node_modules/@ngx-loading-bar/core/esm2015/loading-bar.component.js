import { __decorate, __metadata } from "tslib";
import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';
import { LoadingBarService } from './loading-bar.service';
let LoadingBarComponent = class LoadingBarComponent {
    constructor(loader) {
        this.loader = loader;
        this.includeSpinner = true;
        this.includeBar = true;
        this.fixed = true;
        this.color = '#29d';
    }
    get value$() {
        return this.ref ? this.loader.useRef(this.ref).value$ : this.loader.value$;
    }
};
LoadingBarComponent.ctorParameters = () => [
    { type: LoadingBarService }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], LoadingBarComponent.prototype, "includeSpinner", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], LoadingBarComponent.prototype, "includeBar", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], LoadingBarComponent.prototype, "fixed", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], LoadingBarComponent.prototype, "color", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], LoadingBarComponent.prototype, "value", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], LoadingBarComponent.prototype, "ref", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], LoadingBarComponent.prototype, "height", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], LoadingBarComponent.prototype, "diameter", void 0);
LoadingBarComponent = __decorate([
    Component({
        selector: 'ngx-loading-bar',
        template: `
    <ng-container *ngIf="value != null ? value : (value$ | async) as progress">
      <div *ngIf="includeSpinner" class="ngx-spinner">
        <div [style.width]="diameter" [style.height]="diameter" class="ngx-spinner-icon"></div>
      </div>
      <div
        *ngIf="includeBar"
        class="ngx-bar"
        [style.background]="color"
        [style.height]="height"
        [style.width]="progress + '%'"
      ></div>
    </ng-container>
  `,
        preserveWhitespaces: false,
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.Emulated,
        host: {
            '[attr.fixed]': 'fixed',
            '[style.color]': 'color',
        },
        styles: [":host{position:relative;display:block;pointer-events:none}:host .ngx-spinner{transition:350ms linear;display:block;position:absolute;top:5px;left:0}:host .ngx-spinner .ngx-spinner-icon{width:14px;height:14px;border:2px solid transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;-webkit-animation:.4s linear infinite loading-bar-spinner;animation:.4s linear infinite loading-bar-spinner}:host .ngx-bar{transition:width 350ms;position:absolute;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}[dir=rtl] :host .ngx-bar{right:0;left:unset}:host[fixed=true]{z-index:10002}:host[fixed=true] .ngx-bar{position:fixed}:host[fixed=true] .ngx-spinner{position:fixed;top:10px;left:10px}[dir=rtl] :host[fixed=true] .ngx-spinner{right:10px;left:unset}@-webkit-keyframes loading-bar-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes loading-bar-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}"]
    }),
    __metadata("design:paramtypes", [LoadingBarService])
], LoadingBarComponent);
export { LoadingBarComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy1iYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1sb2FkaW5nLWJhci9jb3JlLyIsInNvdXJjZXMiOlsibG9hZGluZy1iYXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQTJCMUQsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBbUI7SUFjOUIsWUFBb0IsTUFBeUI7UUFBekIsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7UUFicEMsbUJBQWMsR0FBRyxJQUFJLENBQUM7UUFDdEIsZUFBVSxHQUFHLElBQUksQ0FBQztRQUNsQixVQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2IsVUFBSyxHQUFHLE1BQU0sQ0FBQztJQVV3QixDQUFDO0lBSmpELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDN0UsQ0FBQztDQUdGLENBQUE7O1lBRDZCLGlCQUFpQjs7QUFicEM7SUFBUixLQUFLLEVBQUU7OzJEQUF1QjtBQUN0QjtJQUFSLEtBQUssRUFBRTs7dURBQW1CO0FBQ2xCO0lBQVIsS0FBSyxFQUFFOztrREFBYztBQUNiO0lBQVIsS0FBSyxFQUFFOztrREFBZ0I7QUFDZjtJQUFSLEtBQUssRUFBRTs7a0RBQWU7QUFDZDtJQUFSLEtBQUssRUFBRTs7Z0RBQWE7QUFDWjtJQUFSLEtBQUssRUFBRTs7bURBQWdCO0FBQ2Y7SUFBUixLQUFLLEVBQUU7O3FEQUFrQjtBQVJmLG1CQUFtQjtJQXpCL0IsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGlCQUFpQjtRQUMzQixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7R0FhVDtRQUNELG1CQUFtQixFQUFFLEtBQUs7UUFDMUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07UUFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLFFBQVE7UUFFekMsSUFBSSxFQUFFO1lBQ0osY0FBYyxFQUFFLE9BQU87WUFDdkIsZUFBZSxFQUFFLE9BQU87U0FDekI7O0tBQ0YsQ0FBQztxQ0FlNEIsaUJBQWlCO0dBZGxDLG1CQUFtQixDQWUvQjtTQWZZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFZpZXdFbmNhcHN1bGF0aW9uLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9hZGluZ0JhclNlcnZpY2UgfSBmcm9tICcuL2xvYWRpbmctYmFyLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtbG9hZGluZy1iYXInLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJ2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiAodmFsdWUkIHwgYXN5bmMpIGFzIHByb2dyZXNzXCI+XG4gICAgICA8ZGl2ICpuZ0lmPVwiaW5jbHVkZVNwaW5uZXJcIiBjbGFzcz1cIm5neC1zcGlubmVyXCI+XG4gICAgICAgIDxkaXYgW3N0eWxlLndpZHRoXT1cImRpYW1ldGVyXCIgW3N0eWxlLmhlaWdodF09XCJkaWFtZXRlclwiIGNsYXNzPVwibmd4LXNwaW5uZXItaWNvblwiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2XG4gICAgICAgICpuZ0lmPVwiaW5jbHVkZUJhclwiXG4gICAgICAgIGNsYXNzPVwibmd4LWJhclwiXG4gICAgICAgIFtzdHlsZS5iYWNrZ3JvdW5kXT1cImNvbG9yXCJcbiAgICAgICAgW3N0eWxlLmhlaWdodF09XCJoZWlnaHRcIlxuICAgICAgICBbc3R5bGUud2lkdGhdPVwicHJvZ3Jlc3MgKyAnJSdcIlxuICAgICAgPjwvZGl2PlxuICAgIDwvbmctY29udGFpbmVyPlxuICBgLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLkVtdWxhdGVkLFxuICBzdHlsZVVybHM6IFsnLi9sb2FkaW5nLWJhci5jb21wb25lbnQuc2NzcyddLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLmZpeGVkXSc6ICdmaXhlZCcsXG4gICAgJ1tzdHlsZS5jb2xvcl0nOiAnY29sb3InLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBMb2FkaW5nQmFyQ29tcG9uZW50IHtcbiAgQElucHV0KCkgaW5jbHVkZVNwaW5uZXIgPSB0cnVlO1xuICBASW5wdXQoKSBpbmNsdWRlQmFyID0gdHJ1ZTtcbiAgQElucHV0KCkgZml4ZWQgPSB0cnVlO1xuICBASW5wdXQoKSBjb2xvciA9ICcjMjlkJztcbiAgQElucHV0KCkgdmFsdWU6IG51bWJlcjtcbiAgQElucHV0KCkgcmVmOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGhlaWdodDogc3RyaW5nO1xuICBASW5wdXQoKSBkaWFtZXRlcjogc3RyaW5nO1xuXG4gIGdldCB2YWx1ZSQoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVmID8gdGhpcy5sb2FkZXIudXNlUmVmKHRoaXMucmVmKS52YWx1ZSQgOiB0aGlzLmxvYWRlci52YWx1ZSQ7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvYWRlcjogTG9hZGluZ0JhclNlcnZpY2UpIHt9XG59XG4iXX0=