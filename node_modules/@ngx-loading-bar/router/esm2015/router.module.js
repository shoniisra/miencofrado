import { __decorate, __metadata } from "tslib";
import { NgModule } from '@angular/core';
import { RouterModule, Router, NavigationStart, NavigationError, NavigationEnd, NavigationCancel, } from '@angular/router';
import { LoadingBarModule, LoadingBarService } from '@ngx-loading-bar/core';
let LoadingBarRouterModule = class LoadingBarRouterModule {
    constructor(router, loader) {
        const ref = loader.useRef('router');
        router.events.subscribe((event) => {
            const navState = this.getCurrentNavigationState(router);
            if (navState && navState.ignoreLoadingBar) {
                return;
            }
            if (event instanceof NavigationStart) {
                ref.start();
            }
            if (event instanceof NavigationError || event instanceof NavigationEnd || event instanceof NavigationCancel) {
                ref.complete();
            }
        });
    }
    getCurrentNavigationState(router) {
        // `getCurrentNavigation` only available in angular `7.2`
        const currentNavigation = router.getCurrentNavigation && router.getCurrentNavigation();
        if (currentNavigation && currentNavigation.extras) {
            return currentNavigation.extras.state;
        }
        return {};
    }
};
LoadingBarRouterModule.ctorParameters = () => [
    { type: Router },
    { type: LoadingBarService }
];
LoadingBarRouterModule = __decorate([
    NgModule({
        imports: [RouterModule, LoadingBarModule],
        exports: [RouterModule, LoadingBarModule],
    }),
    __metadata("design:paramtypes", [Router, LoadingBarService])
], LoadingBarRouterModule);
export { LoadingBarRouterModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtbG9hZGluZy1iYXIvcm91dGVyLyIsInNvdXJjZXMiOlsicm91dGVyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQ0wsWUFBWSxFQUNaLE1BQU0sRUFDTixlQUFlLEVBQ2YsZUFBZSxFQUNmLGFBQWEsRUFDYixnQkFBZ0IsR0FDakIsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQU01RSxJQUFhLHNCQUFzQixHQUFuQyxNQUFhLHNCQUFzQjtJQUNqQyxZQUFZLE1BQWMsRUFBRSxNQUF5QjtRQUNuRCxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDaEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hELElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDekMsT0FBTzthQUNSO1lBRUQsSUFBSSxLQUFLLFlBQVksZUFBZSxFQUFFO2dCQUNwQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDYjtZQUVELElBQUksS0FBSyxZQUFZLGVBQWUsSUFBSSxLQUFLLFlBQVksYUFBYSxJQUFJLEtBQUssWUFBWSxnQkFBZ0IsRUFBRTtnQkFDM0csR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO2FBQ2hCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8seUJBQXlCLENBQUMsTUFBVztRQUMzQyx5REFBeUQ7UUFDekQsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLENBQUMsb0JBQW9CLElBQUksTUFBTSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDdkYsSUFBSSxpQkFBaUIsSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLEVBQUU7WUFDakQsT0FBTyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ3ZDO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0NBQ0YsQ0FBQTs7WUEzQnFCLE1BQU07WUFBVSxpQkFBaUI7O0FBRDFDLHNCQUFzQjtJQUpsQyxRQUFRLENBQUM7UUFDUixPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUM7UUFDekMsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLGdCQUFnQixDQUFDO0tBQzFDLENBQUM7cUNBRW9CLE1BQU0sRUFBVSxpQkFBaUI7R0FEMUMsc0JBQXNCLENBNEJsQztTQTVCWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgUm91dGVyTW9kdWxlLFxuICBSb3V0ZXIsXG4gIE5hdmlnYXRpb25TdGFydCxcbiAgTmF2aWdhdGlvbkVycm9yLFxuICBOYXZpZ2F0aW9uRW5kLFxuICBOYXZpZ2F0aW9uQ2FuY2VsLFxufSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgTG9hZGluZ0Jhck1vZHVsZSwgTG9hZGluZ0JhclNlcnZpY2UgfSBmcm9tICdAbmd4LWxvYWRpbmctYmFyL2NvcmUnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbUm91dGVyTW9kdWxlLCBMb2FkaW5nQmFyTW9kdWxlXSxcbiAgZXhwb3J0czogW1JvdXRlck1vZHVsZSwgTG9hZGluZ0Jhck1vZHVsZV0sXG59KVxuZXhwb3J0IGNsYXNzIExvYWRpbmdCYXJSb3V0ZXJNb2R1bGUge1xuICBjb25zdHJ1Y3Rvcihyb3V0ZXI6IFJvdXRlciwgbG9hZGVyOiBMb2FkaW5nQmFyU2VydmljZSkge1xuICAgIGNvbnN0IHJlZiA9IGxvYWRlci51c2VSZWYoJ3JvdXRlcicpO1xuICAgIHJvdXRlci5ldmVudHMuc3Vic2NyaWJlKChldmVudCkgPT4ge1xuICAgICAgY29uc3QgbmF2U3RhdGUgPSB0aGlzLmdldEN1cnJlbnROYXZpZ2F0aW9uU3RhdGUocm91dGVyKTtcbiAgICAgIGlmIChuYXZTdGF0ZSAmJiBuYXZTdGF0ZS5pZ25vcmVMb2FkaW5nQmFyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvblN0YXJ0KSB7XG4gICAgICAgIHJlZi5zdGFydCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRXJyb3IgfHwgZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kIHx8IGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkNhbmNlbCkge1xuICAgICAgICByZWYuY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q3VycmVudE5hdmlnYXRpb25TdGF0ZShyb3V0ZXI6IGFueSkge1xuICAgIC8vIGBnZXRDdXJyZW50TmF2aWdhdGlvbmAgb25seSBhdmFpbGFibGUgaW4gYW5ndWxhciBgNy4yYFxuICAgIGNvbnN0IGN1cnJlbnROYXZpZ2F0aW9uID0gcm91dGVyLmdldEN1cnJlbnROYXZpZ2F0aW9uICYmIHJvdXRlci5nZXRDdXJyZW50TmF2aWdhdGlvbigpO1xuICAgIGlmIChjdXJyZW50TmF2aWdhdGlvbiAmJiBjdXJyZW50TmF2aWdhdGlvbi5leHRyYXMpIHtcbiAgICAgIHJldHVybiBjdXJyZW50TmF2aWdhdGlvbi5leHRyYXMuc3RhdGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHt9O1xuICB9XG59XG4iXX0=