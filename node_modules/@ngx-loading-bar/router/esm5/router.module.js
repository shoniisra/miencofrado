import { __decorate, __metadata } from "tslib";
import { NgModule } from '@angular/core';
import { RouterModule, Router, NavigationStart, NavigationError, NavigationEnd, NavigationCancel, } from '@angular/router';
import { LoadingBarModule, LoadingBarService } from '@ngx-loading-bar/core';
var LoadingBarRouterModule = /** @class */ (function () {
    function LoadingBarRouterModule(router, loader) {
        var _this = this;
        var ref = loader.useRef('router');
        router.events.subscribe(function (event) {
            var navState = _this.getCurrentNavigationState(router);
            if (navState && navState.ignoreLoadingBar) {
                return;
            }
            if (event instanceof NavigationStart) {
                ref.start();
            }
            if (event instanceof NavigationError || event instanceof NavigationEnd || event instanceof NavigationCancel) {
                ref.complete();
            }
        });
    }
    LoadingBarRouterModule.prototype.getCurrentNavigationState = function (router) {
        // `getCurrentNavigation` only available in angular `7.2`
        var currentNavigation = router.getCurrentNavigation && router.getCurrentNavigation();
        if (currentNavigation && currentNavigation.extras) {
            return currentNavigation.extras.state;
        }
        return {};
    };
    LoadingBarRouterModule.ctorParameters = function () { return [
        { type: Router },
        { type: LoadingBarService }
    ]; };
    LoadingBarRouterModule = __decorate([
        NgModule({
            imports: [RouterModule, LoadingBarModule],
            exports: [RouterModule, LoadingBarModule],
        }),
        __metadata("design:paramtypes", [Router, LoadingBarService])
    ], LoadingBarRouterModule);
    return LoadingBarRouterModule;
}());
export { LoadingBarRouterModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtbG9hZGluZy1iYXIvcm91dGVyLyIsInNvdXJjZXMiOlsicm91dGVyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQ0wsWUFBWSxFQUNaLE1BQU0sRUFDTixlQUFlLEVBQ2YsZUFBZSxFQUNmLGFBQWEsRUFDYixnQkFBZ0IsR0FDakIsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQU01RTtJQUNFLGdDQUFZLE1BQWMsRUFBRSxNQUF5QjtRQUFyRCxpQkFnQkM7UUFmQyxJQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQUMsS0FBSztZQUM1QixJQUFNLFFBQVEsR0FBRyxLQUFJLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDeEQsSUFBSSxRQUFRLElBQUksUUFBUSxDQUFDLGdCQUFnQixFQUFFO2dCQUN6QyxPQUFPO2FBQ1I7WUFFRCxJQUFJLEtBQUssWUFBWSxlQUFlLEVBQUU7Z0JBQ3BDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNiO1lBRUQsSUFBSSxLQUFLLFlBQVksZUFBZSxJQUFJLEtBQUssWUFBWSxhQUFhLElBQUksS0FBSyxZQUFZLGdCQUFnQixFQUFFO2dCQUMzRyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDaEI7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTywwREFBeUIsR0FBakMsVUFBa0MsTUFBVztRQUMzQyx5REFBeUQ7UUFDekQsSUFBTSxpQkFBaUIsR0FBRyxNQUFNLENBQUMsb0JBQW9CLElBQUksTUFBTSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDdkYsSUFBSSxpQkFBaUIsSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLEVBQUU7WUFDakQsT0FBTyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ3ZDO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDOztnQkExQm1CLE1BQU07Z0JBQVUsaUJBQWlCOztJQUQxQyxzQkFBc0I7UUFKbEMsUUFBUSxDQUFDO1lBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLGdCQUFnQixDQUFDO1lBQ3pDLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQztTQUMxQyxDQUFDO3lDQUVvQixNQUFNLEVBQVUsaUJBQWlCO09BRDFDLHNCQUFzQixDQTRCbEM7SUFBRCw2QkFBQztDQUFBLEFBNUJELElBNEJDO1NBNUJZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBSb3V0ZXJNb2R1bGUsXG4gIFJvdXRlcixcbiAgTmF2aWdhdGlvblN0YXJ0LFxuICBOYXZpZ2F0aW9uRXJyb3IsXG4gIE5hdmlnYXRpb25FbmQsXG4gIE5hdmlnYXRpb25DYW5jZWwsXG59IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBMb2FkaW5nQmFyTW9kdWxlLCBMb2FkaW5nQmFyU2VydmljZSB9IGZyb20gJ0BuZ3gtbG9hZGluZy1iYXIvY29yZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtSb3V0ZXJNb2R1bGUsIExvYWRpbmdCYXJNb2R1bGVdLFxuICBleHBvcnRzOiBbUm91dGVyTW9kdWxlLCBMb2FkaW5nQmFyTW9kdWxlXSxcbn0pXG5leHBvcnQgY2xhc3MgTG9hZGluZ0JhclJvdXRlck1vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKHJvdXRlcjogUm91dGVyLCBsb2FkZXI6IExvYWRpbmdCYXJTZXJ2aWNlKSB7XG4gICAgY29uc3QgcmVmID0gbG9hZGVyLnVzZVJlZigncm91dGVyJyk7XG4gICAgcm91dGVyLmV2ZW50cy5zdWJzY3JpYmUoKGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBuYXZTdGF0ZSA9IHRoaXMuZ2V0Q3VycmVudE5hdmlnYXRpb25TdGF0ZShyb3V0ZXIpO1xuICAgICAgaWYgKG5hdlN0YXRlICYmIG5hdlN0YXRlLmlnbm9yZUxvYWRpbmdCYXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uU3RhcnQpIHtcbiAgICAgICAgcmVmLnN0YXJ0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FcnJvciB8fCBldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQgfHwgZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uQ2FuY2VsKSB7XG4gICAgICAgIHJlZi5jb21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDdXJyZW50TmF2aWdhdGlvblN0YXRlKHJvdXRlcjogYW55KSB7XG4gICAgLy8gYGdldEN1cnJlbnROYXZpZ2F0aW9uYCBvbmx5IGF2YWlsYWJsZSBpbiBhbmd1bGFyIGA3LjJgXG4gICAgY29uc3QgY3VycmVudE5hdmlnYXRpb24gPSByb3V0ZXIuZ2V0Q3VycmVudE5hdmlnYXRpb24gJiYgcm91dGVyLmdldEN1cnJlbnROYXZpZ2F0aW9uKCk7XG4gICAgaWYgKGN1cnJlbnROYXZpZ2F0aW9uICYmIGN1cnJlbnROYXZpZ2F0aW9uLmV4dHJhcykge1xuICAgICAgcmV0dXJuIGN1cnJlbnROYXZpZ2F0aW9uLmV4dHJhcy5zdGF0ZTtcbiAgICB9XG5cbiAgICByZXR1cm4ge307XG4gIH1cbn1cbiJdfQ==