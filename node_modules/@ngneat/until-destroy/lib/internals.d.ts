import { InjectableType, ɵPipeDef as PipeDef, ɵComponentDef as ComponentDef, ɵDirectiveDef as DirectiveDef } from '@angular/core';
export declare function isFunction(target: unknown): boolean;
/**
 * If we use the `untilDestroyed` operator multiple times inside the single
 * instance providing different `destroyMethodName`, then all streams will
 * subscribe to the single subject. If any method is invoked, the subject will
 * emit and all streams will be unsubscribed. We wan't to prevent this behavior,
 * thus we store subjects under different symbols.
 */
export declare function getSymbol<T>(destroyMethodName?: keyof T): symbol;
export declare function missingDecorator<T>(providerOrDef: InjectableType<T> | PipeDef<T> | ComponentDef<T> | DirectiveDef<T>): boolean;
export declare function markAsDecorated<T>(providerOrDef: InjectableType<T> | PipeDef<T> | ComponentDef<T> | DirectiveDef<T>): void;
export interface UntilDestroyOptions {
    blackList?: string[];
    arrayName?: string;
    checkProperties?: boolean;
}
export declare function ensureClassIsDecorated(instance: any): never | void;
export declare function createSubjectOnTheInstance(instance: any, symbol: symbol): void;
export declare function completeSubjectOnTheInstance(instance: any, symbol: symbol): void;
