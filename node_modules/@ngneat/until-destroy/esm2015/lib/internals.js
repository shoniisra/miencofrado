import { Subject } from 'rxjs';
import { getDef, isInjectableType } from './ivy';
export function isFunction(target) {
    return typeof target === 'function';
}
/**
 * Applied to instances and stores `Subject` instance when
 * no custom destroy method is provided.
 */
const DESTROY = Symbol('__destroy');
/**
 * Applied to definitions and informs that class is decorated
 */
const DECORATOR_APPLIED = Symbol('__decoratorApplied');
/**
 * If we use the `untilDestroyed` operator multiple times inside the single
 * instance providing different `destroyMethodName`, then all streams will
 * subscribe to the single subject. If any method is invoked, the subject will
 * emit and all streams will be unsubscribed. We wan't to prevent this behavior,
 * thus we store subjects under different symbols.
 */
export function getSymbol(destroyMethodName) {
    if (typeof destroyMethodName === 'string') {
        return Symbol(`__destroy__${destroyMethodName}`);
    }
    else {
        return DESTROY;
    }
}
export function missingDecorator(providerOrDef) {
    return !providerOrDef[DECORATOR_APPLIED];
}
export function markAsDecorated(providerOrDef) {
    providerOrDef[DECORATOR_APPLIED] = true;
}
export function ensureClassIsDecorated(instance) {
    const constructor = instance.constructor;
    const providerOrDef = isInjectableType(constructor) ? constructor : getDef(constructor);
    if (missingDecorator(providerOrDef)) {
        throw new Error('untilDestroyed operator cannot be used inside directives or ' +
            'components or providers that are not decorated with UntilDestroy decorator');
    }
}
export function createSubjectOnTheInstance(instance, symbol) {
    if (!instance[symbol]) {
        instance[symbol] = new Subject();
    }
}
export function completeSubjectOnTheInstance(instance, symbol) {
    if (instance[symbol]) {
        instance[symbol].next();
        instance[symbol].complete();
        // We also have to re-assign this property thus in the future
        // we will be able to create new subject on the same instance.
        instance[symbol] = null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nbmVhdC91bnRpbC1kZXN0cm95LyIsInNvdXJjZXMiOlsibGliL2ludGVybmFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRS9CLE9BQU8sRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFFakQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxNQUFlO0lBQ3hDLE9BQU8sT0FBTyxNQUFNLEtBQUssVUFBVSxDQUFDO0FBQ3RDLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sR0FBa0IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRW5EOztHQUVHO0FBQ0gsTUFBTSxpQkFBaUIsR0FBa0IsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFFdEU7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FBSSxpQkFBMkI7SUFDdEQsSUFBSSxPQUFPLGlCQUFpQixLQUFLLFFBQVEsRUFBRTtRQUN6QyxPQUFPLE1BQU0sQ0FBQyxjQUFjLGlCQUFpQixFQUFFLENBQUMsQ0FBQztLQUNsRDtTQUFNO1FBQ0wsT0FBTyxPQUFPLENBQUM7S0FDaEI7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUM5QixhQUFpRjtJQUVqRixPQUFPLENBQUUsYUFBcUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3BELENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUM3QixhQUFpRjtJQUVoRixhQUFxQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsSUFBSSxDQUFDO0FBQ25ELENBQUM7QUFRRCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsUUFBYTtJQUNsRCxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDO0lBQ3pDLE1BQU0sYUFBYSxHQUFHLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUV4RixJQUFJLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxFQUFFO1FBQ25DLE1BQU0sSUFBSSxLQUFLLENBQ2IsOERBQThEO1lBQzVELDRFQUE0RSxDQUMvRSxDQUFDO0tBQ0g7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLDBCQUEwQixDQUFDLFFBQWEsRUFBRSxNQUFjO0lBQ3RFLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDckIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7S0FDeEM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLDRCQUE0QixDQUFDLFFBQWEsRUFBRSxNQUFjO0lBQ3hFLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3BCLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN4QixRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDNUIsNkRBQTZEO1FBQzdELDhEQUE4RDtRQUM5RCxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDO0tBQ3pCO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEluamVjdGFibGVUeXBlLFxuICDJtVBpcGVEZWYgYXMgUGlwZURlZixcbiAgybVDb21wb25lbnREZWYgYXMgQ29tcG9uZW50RGVmLFxuICDJtURpcmVjdGl2ZURlZiBhcyBEaXJlY3RpdmVEZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IGdldERlZiwgaXNJbmplY3RhYmxlVHlwZSB9IGZyb20gJy4vaXZ5JztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24odGFyZ2V0OiB1bmtub3duKSB7XG4gIHJldHVybiB0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nO1xufVxuXG4vKipcbiAqIEFwcGxpZWQgdG8gaW5zdGFuY2VzIGFuZCBzdG9yZXMgYFN1YmplY3RgIGluc3RhbmNlIHdoZW5cbiAqIG5vIGN1c3RvbSBkZXN0cm95IG1ldGhvZCBpcyBwcm92aWRlZC5cbiAqL1xuY29uc3QgREVTVFJPWTogdW5pcXVlIHN5bWJvbCA9IFN5bWJvbCgnX19kZXN0cm95Jyk7XG5cbi8qKlxuICogQXBwbGllZCB0byBkZWZpbml0aW9ucyBhbmQgaW5mb3JtcyB0aGF0IGNsYXNzIGlzIGRlY29yYXRlZFxuICovXG5jb25zdCBERUNPUkFUT1JfQVBQTElFRDogdW5pcXVlIHN5bWJvbCA9IFN5bWJvbCgnX19kZWNvcmF0b3JBcHBsaWVkJyk7XG5cbi8qKlxuICogSWYgd2UgdXNlIHRoZSBgdW50aWxEZXN0cm95ZWRgIG9wZXJhdG9yIG11bHRpcGxlIHRpbWVzIGluc2lkZSB0aGUgc2luZ2xlXG4gKiBpbnN0YW5jZSBwcm92aWRpbmcgZGlmZmVyZW50IGBkZXN0cm95TWV0aG9kTmFtZWAsIHRoZW4gYWxsIHN0cmVhbXMgd2lsbFxuICogc3Vic2NyaWJlIHRvIHRoZSBzaW5nbGUgc3ViamVjdC4gSWYgYW55IG1ldGhvZCBpcyBpbnZva2VkLCB0aGUgc3ViamVjdCB3aWxsXG4gKiBlbWl0IGFuZCBhbGwgc3RyZWFtcyB3aWxsIGJlIHVuc3Vic2NyaWJlZC4gV2Ugd2FuJ3QgdG8gcHJldmVudCB0aGlzIGJlaGF2aW9yLFxuICogdGh1cyB3ZSBzdG9yZSBzdWJqZWN0cyB1bmRlciBkaWZmZXJlbnQgc3ltYm9scy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN5bWJvbDxUPihkZXN0cm95TWV0aG9kTmFtZT86IGtleW9mIFQpOiBzeW1ib2wge1xuICBpZiAodHlwZW9mIGRlc3Ryb3lNZXRob2ROYW1lID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBTeW1ib2woYF9fZGVzdHJveV9fJHtkZXN0cm95TWV0aG9kTmFtZX1gKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gREVTVFJPWTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWlzc2luZ0RlY29yYXRvcjxUPihcbiAgcHJvdmlkZXJPckRlZjogSW5qZWN0YWJsZVR5cGU8VD4gfCBQaXBlRGVmPFQ+IHwgQ29tcG9uZW50RGVmPFQ+IHwgRGlyZWN0aXZlRGVmPFQ+XG4pOiBib29sZWFuIHtcbiAgcmV0dXJuICEocHJvdmlkZXJPckRlZiBhcyBhbnkpW0RFQ09SQVRPUl9BUFBMSUVEXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcmtBc0RlY29yYXRlZDxUPihcbiAgcHJvdmlkZXJPckRlZjogSW5qZWN0YWJsZVR5cGU8VD4gfCBQaXBlRGVmPFQ+IHwgQ29tcG9uZW50RGVmPFQ+IHwgRGlyZWN0aXZlRGVmPFQ+XG4pOiB2b2lkIHtcbiAgKHByb3ZpZGVyT3JEZWYgYXMgYW55KVtERUNPUkFUT1JfQVBQTElFRF0gPSB0cnVlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVudGlsRGVzdHJveU9wdGlvbnMge1xuICBibGFja0xpc3Q/OiBzdHJpbmdbXTtcbiAgYXJyYXlOYW1lPzogc3RyaW5nO1xuICBjaGVja1Byb3BlcnRpZXM/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlQ2xhc3NJc0RlY29yYXRlZChpbnN0YW5jZTogYW55KTogbmV2ZXIgfCB2b2lkIHtcbiAgY29uc3QgY29uc3RydWN0b3IgPSBpbnN0YW5jZS5jb25zdHJ1Y3RvcjtcbiAgY29uc3QgcHJvdmlkZXJPckRlZiA9IGlzSW5qZWN0YWJsZVR5cGUoY29uc3RydWN0b3IpID8gY29uc3RydWN0b3IgOiBnZXREZWYoY29uc3RydWN0b3IpO1xuXG4gIGlmIChtaXNzaW5nRGVjb3JhdG9yKHByb3ZpZGVyT3JEZWYpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ3VudGlsRGVzdHJveWVkIG9wZXJhdG9yIGNhbm5vdCBiZSB1c2VkIGluc2lkZSBkaXJlY3RpdmVzIG9yICcgK1xuICAgICAgICAnY29tcG9uZW50cyBvciBwcm92aWRlcnMgdGhhdCBhcmUgbm90IGRlY29yYXRlZCB3aXRoIFVudGlsRGVzdHJveSBkZWNvcmF0b3InXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3ViamVjdE9uVGhlSW5zdGFuY2UoaW5zdGFuY2U6IGFueSwgc3ltYm9sOiBzeW1ib2wpOiB2b2lkIHtcbiAgaWYgKCFpbnN0YW5jZVtzeW1ib2xdKSB7XG4gICAgaW5zdGFuY2Vbc3ltYm9sXSA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBsZXRlU3ViamVjdE9uVGhlSW5zdGFuY2UoaW5zdGFuY2U6IGFueSwgc3ltYm9sOiBzeW1ib2wpOiB2b2lkIHtcbiAgaWYgKGluc3RhbmNlW3N5bWJvbF0pIHtcbiAgICBpbnN0YW5jZVtzeW1ib2xdLm5leHQoKTtcbiAgICBpbnN0YW5jZVtzeW1ib2xdLmNvbXBsZXRlKCk7XG4gICAgLy8gV2UgYWxzbyBoYXZlIHRvIHJlLWFzc2lnbiB0aGlzIHByb3BlcnR5IHRodXMgaW4gdGhlIGZ1dHVyZVxuICAgIC8vIHdlIHdpbGwgYmUgYWJsZSB0byBjcmVhdGUgbmV3IHN1YmplY3Qgb24gdGhlIHNhbWUgaW5zdGFuY2UuXG4gICAgaW5zdGFuY2Vbc3ltYm9sXSA9IG51bGw7XG4gIH1cbn1cbiJdfQ==