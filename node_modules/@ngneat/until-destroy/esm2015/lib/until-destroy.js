import { getSymbol, isFunction, markAsDecorated, missingDecorator, completeSubjectOnTheInstance } from './internals';
import { getDef, getDefName, isInjectableType } from './ivy';
function unsubscribe(property) {
    property && isFunction(property.unsubscribe) && property.unsubscribe();
}
function unsubscribeIfPropertyIsArrayLike(property) {
    Array.isArray(property) && property.forEach(unsubscribe);
}
function decorateNgOnDestroy(ngOnDestroy, { arrayName, checkProperties, blackList }) {
    return function () {
        // Invoke the original `ngOnDestroy` if it exists
        ngOnDestroy && ngOnDestroy.call(this);
        // It's important to use `this` instead of caching instance
        // that may lead to memory leaks
        completeSubjectOnTheInstance(this, getSymbol());
        // Check if subscriptions are pushed to some array
        if (arrayName) {
            return unsubscribeIfPropertyIsArrayLike(this[arrayName]);
        }
        // Loop through the properties and find subscriptions
        if (checkProperties) {
            for (const property in this) {
                if (blackList && blackList.includes(property)) {
                    continue;
                }
                unsubscribe(this[property]);
            }
        }
    };
}
/**
 * Services do not have definitions, thus we just have to override the
 * prototype property in Ivy
 */
function decorateProvider(type, options) {
    type.prototype.ngOnDestroy = decorateNgOnDestroy(type.prototype.ngOnDestroy, options);
    markAsDecorated(type);
}
/**
 * https://github.com/ngneat/until-destroy/issues/78
 * Some declared components or directives may be compiled asynchronously in JIT,
 * especially those that're lazy-loaded. And thus may have their
 * definition not accessible yet.
 */
function decorateDeclarableJIT(type, options) {
    const defName = getDefName(type);
    const getter = Object.getOwnPropertyDescriptor(type, defName).get;
    Object.defineProperty(type, defName, {
        get() {
            const def = getter();
            if (missingDecorator(def)) {
                def.onDestroy = decorateNgOnDestroy(def.onDestroy, options);
                markAsDecorated(def);
            }
            return def;
        }
    });
}
function decorateDeclarable(type, options) {
    const isJIT = type.hasOwnProperty('__annotations__');
    if (isJIT) {
        decorateDeclarableJIT(type, options);
    }
    else {
        const def = getDef(type);
        def.onDestroy = decorateNgOnDestroy(def.onDestroy, options);
        markAsDecorated(def);
    }
}
export function UntilDestroy(options = {}) {
    return (target) => {
        if (isInjectableType(target)) {
            decorateProvider(target, options);
        }
        else {
            decorateDeclarable(target, options);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW50aWwtZGVzdHJveS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ25lYXQvdW50aWwtZGVzdHJveS8iLCJzb3VyY2VzIjpbImxpYi91bnRpbC1kZXN0cm95LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLGVBQWUsRUFDZixnQkFBZ0IsRUFFaEIsNEJBQTRCLEVBQzdCLE1BQU0sYUFBYSxDQUFDO0FBQ3JCLE9BQU8sRUFBWSxNQUFNLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRXZFLFNBQVMsV0FBVyxDQUFDLFFBQXNDO0lBQ3pELFFBQVEsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN6RSxDQUFDO0FBRUQsU0FBUyxnQ0FBZ0MsQ0FBQyxRQUFlO0lBQ3ZELEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBRUQsU0FBUyxtQkFBbUIsQ0FDMUIsV0FBNEMsRUFDNUMsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBdUI7SUFFOUQsT0FBTztRQUNMLGlEQUFpRDtRQUNqRCxXQUFXLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV0QywyREFBMkQ7UUFDM0QsZ0NBQWdDO1FBQ2hDLDRCQUE0QixDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBRWhELGtEQUFrRDtRQUNsRCxJQUFJLFNBQVMsRUFBRTtZQUNiLE9BQU8sZ0NBQWdDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDMUQ7UUFFRCxxREFBcUQ7UUFDckQsSUFBSSxlQUFlLEVBQUU7WUFDbkIsS0FBSyxNQUFNLFFBQVEsSUFBSSxJQUFJLEVBQUU7Z0JBQzNCLElBQUksU0FBUyxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7b0JBQzdDLFNBQVM7aUJBQ1Y7Z0JBRUQsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2FBQzdCO1NBQ0Y7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBUyxnQkFBZ0IsQ0FBQyxJQUE2QixFQUFFLE9BQTRCO0lBQ25GLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLG1CQUFtQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3RGLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QixDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFTLHFCQUFxQixDQUM1QixJQUF1RCxFQUN2RCxPQUE0QjtJQUU1QixNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLHdCQUF3QixDQUFDLElBQUksRUFBRSxPQUFPLENBQUUsQ0FBQyxHQUFJLENBQUM7SUFFcEUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFO1FBQ25DLEdBQUc7WUFDRCxNQUFNLEdBQUcsR0FBRyxNQUFNLEVBQUUsQ0FBQztZQUVyQixJQUFJLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN4QixHQUFpQyxDQUFDLFNBQVMsR0FBRyxtQkFBbUIsQ0FDaEUsR0FBRyxDQUFDLFNBQVMsRUFDYixPQUFPLENBQ1IsQ0FBQztnQkFDRixlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDdEI7WUFFRCxPQUFPLEdBQUcsQ0FBQztRQUNiLENBQUM7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FDekIsSUFBdUQsRUFDdkQsT0FBNEI7SUFFNUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRXJELElBQUksS0FBSyxFQUFFO1FBQ1QscUJBQXFCLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ3RDO1NBQU07UUFDTCxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEIsR0FBaUMsQ0FBQyxTQUFTLEdBQUcsbUJBQW1CLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMzRixlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDdEI7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxVQUErQixFQUFFO0lBQzVELE9BQU8sQ0FBQyxNQUFXLEVBQUUsRUFBRTtRQUNyQixJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzVCLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztTQUNuQzthQUFNO1lBQ0wsa0JBQWtCLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ3JDO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEluamVjdGFibGVUeXBlLFxuICDJtUNvbXBvbmVudFR5cGUgYXMgQ29tcG9uZW50VHlwZSxcbiAgybVEaXJlY3RpdmVUeXBlIGFzIERpcmVjdGl2ZVR5cGVcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb25MaWtlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7XG4gIGdldFN5bWJvbCxcbiAgaXNGdW5jdGlvbixcbiAgbWFya0FzRGVjb3JhdGVkLFxuICBtaXNzaW5nRGVjb3JhdG9yLFxuICBVbnRpbERlc3Ryb3lPcHRpb25zLFxuICBjb21wbGV0ZVN1YmplY3RPblRoZUluc3RhbmNlXG59IGZyb20gJy4vaW50ZXJuYWxzJztcbmltcG9ydCB7IFBpcGVUeXBlLCBnZXREZWYsIGdldERlZk5hbWUsIGlzSW5qZWN0YWJsZVR5cGUgfSBmcm9tICcuL2l2eSc7XG5cbmZ1bmN0aW9uIHVuc3Vic2NyaWJlKHByb3BlcnR5OiBTdWJzY3JpcHRpb25MaWtlIHwgdW5kZWZpbmVkKTogdm9pZCB7XG4gIHByb3BlcnR5ICYmIGlzRnVuY3Rpb24ocHJvcGVydHkudW5zdWJzY3JpYmUpICYmIHByb3BlcnR5LnVuc3Vic2NyaWJlKCk7XG59XG5cbmZ1bmN0aW9uIHVuc3Vic2NyaWJlSWZQcm9wZXJ0eUlzQXJyYXlMaWtlKHByb3BlcnR5OiBhbnlbXSk6IHZvaWQge1xuICBBcnJheS5pc0FycmF5KHByb3BlcnR5KSAmJiBwcm9wZXJ0eS5mb3JFYWNoKHVuc3Vic2NyaWJlKTtcbn1cblxuZnVuY3Rpb24gZGVjb3JhdGVOZ09uRGVzdHJveShcbiAgbmdPbkRlc3Ryb3k6ICgoKSA9PiB2b2lkKSB8IG51bGwgfCB1bmRlZmluZWQsXG4gIHsgYXJyYXlOYW1lLCBjaGVja1Byb3BlcnRpZXMsIGJsYWNrTGlzdCB9OiBVbnRpbERlc3Ryb3lPcHRpb25zXG4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRoaXM6IGFueSkge1xuICAgIC8vIEludm9rZSB0aGUgb3JpZ2luYWwgYG5nT25EZXN0cm95YCBpZiBpdCBleGlzdHNcbiAgICBuZ09uRGVzdHJveSAmJiBuZ09uRGVzdHJveS5jYWxsKHRoaXMpO1xuXG4gICAgLy8gSXQncyBpbXBvcnRhbnQgdG8gdXNlIGB0aGlzYCBpbnN0ZWFkIG9mIGNhY2hpbmcgaW5zdGFuY2VcbiAgICAvLyB0aGF0IG1heSBsZWFkIHRvIG1lbW9yeSBsZWFrc1xuICAgIGNvbXBsZXRlU3ViamVjdE9uVGhlSW5zdGFuY2UodGhpcywgZ2V0U3ltYm9sKCkpO1xuXG4gICAgLy8gQ2hlY2sgaWYgc3Vic2NyaXB0aW9ucyBhcmUgcHVzaGVkIHRvIHNvbWUgYXJyYXlcbiAgICBpZiAoYXJyYXlOYW1lKSB7XG4gICAgICByZXR1cm4gdW5zdWJzY3JpYmVJZlByb3BlcnR5SXNBcnJheUxpa2UodGhpc1thcnJheU5hbWVdKTtcbiAgICB9XG5cbiAgICAvLyBMb29wIHRocm91Z2ggdGhlIHByb3BlcnRpZXMgYW5kIGZpbmQgc3Vic2NyaXB0aW9uc1xuICAgIGlmIChjaGVja1Byb3BlcnRpZXMpIHtcbiAgICAgIGZvciAoY29uc3QgcHJvcGVydHkgaW4gdGhpcykge1xuICAgICAgICBpZiAoYmxhY2tMaXN0ICYmIGJsYWNrTGlzdC5pbmNsdWRlcyhwcm9wZXJ0eSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVuc3Vic2NyaWJlKHRoaXNbcHJvcGVydHldKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogU2VydmljZXMgZG8gbm90IGhhdmUgZGVmaW5pdGlvbnMsIHRodXMgd2UganVzdCBoYXZlIHRvIG92ZXJyaWRlIHRoZVxuICogcHJvdG90eXBlIHByb3BlcnR5IGluIEl2eVxuICovXG5mdW5jdGlvbiBkZWNvcmF0ZVByb3ZpZGVyKHR5cGU6IEluamVjdGFibGVUeXBlPHVua25vd24+LCBvcHRpb25zOiBVbnRpbERlc3Ryb3lPcHRpb25zKTogdm9pZCB7XG4gIHR5cGUucHJvdG90eXBlLm5nT25EZXN0cm95ID0gZGVjb3JhdGVOZ09uRGVzdHJveSh0eXBlLnByb3RvdHlwZS5uZ09uRGVzdHJveSwgb3B0aW9ucyk7XG4gIG1hcmtBc0RlY29yYXRlZCh0eXBlKTtcbn1cblxuLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmduZWF0L3VudGlsLWRlc3Ryb3kvaXNzdWVzLzc4XG4gKiBTb21lIGRlY2xhcmVkIGNvbXBvbmVudHMgb3IgZGlyZWN0aXZlcyBtYXkgYmUgY29tcGlsZWQgYXN5bmNocm9ub3VzbHkgaW4gSklULFxuICogZXNwZWNpYWxseSB0aG9zZSB0aGF0J3JlIGxhenktbG9hZGVkLiBBbmQgdGh1cyBtYXkgaGF2ZSB0aGVpclxuICogZGVmaW5pdGlvbiBub3QgYWNjZXNzaWJsZSB5ZXQuXG4gKi9cbmZ1bmN0aW9uIGRlY29yYXRlRGVjbGFyYWJsZUpJVDxUPihcbiAgdHlwZTogUGlwZVR5cGU8VD4gfCBDb21wb25lbnRUeXBlPFQ+IHwgRGlyZWN0aXZlVHlwZTxUPixcbiAgb3B0aW9uczogVW50aWxEZXN0cm95T3B0aW9uc1xuKSB7XG4gIGNvbnN0IGRlZk5hbWUgPSBnZXREZWZOYW1lKHR5cGUpO1xuICBjb25zdCBnZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHR5cGUsIGRlZk5hbWUpIS5nZXQhO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0eXBlLCBkZWZOYW1lLCB7XG4gICAgZ2V0KCkge1xuICAgICAgY29uc3QgZGVmID0gZ2V0dGVyKCk7XG5cbiAgICAgIGlmIChtaXNzaW5nRGVjb3JhdG9yKGRlZikpIHtcbiAgICAgICAgKGRlZiBhcyB7IG9uRGVzdHJveTogKCkgPT4gdm9pZCB9KS5vbkRlc3Ryb3kgPSBkZWNvcmF0ZU5nT25EZXN0cm95KFxuICAgICAgICAgIGRlZi5vbkRlc3Ryb3ksXG4gICAgICAgICAgb3B0aW9uc1xuICAgICAgICApO1xuICAgICAgICBtYXJrQXNEZWNvcmF0ZWQoZGVmKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRlZjtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBkZWNvcmF0ZURlY2xhcmFibGU8VD4oXG4gIHR5cGU6IFBpcGVUeXBlPFQ+IHwgQ29tcG9uZW50VHlwZTxUPiB8IERpcmVjdGl2ZVR5cGU8VD4sXG4gIG9wdGlvbnM6IFVudGlsRGVzdHJveU9wdGlvbnNcbikge1xuICBjb25zdCBpc0pJVCA9IHR5cGUuaGFzT3duUHJvcGVydHkoJ19fYW5ub3RhdGlvbnNfXycpO1xuXG4gIGlmIChpc0pJVCkge1xuICAgIGRlY29yYXRlRGVjbGFyYWJsZUpJVCh0eXBlLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBkZWYgPSBnZXREZWYodHlwZSk7XG4gICAgKGRlZiBhcyB7IG9uRGVzdHJveTogKCkgPT4gdm9pZCB9KS5vbkRlc3Ryb3kgPSBkZWNvcmF0ZU5nT25EZXN0cm95KGRlZi5vbkRlc3Ryb3ksIG9wdGlvbnMpO1xuICAgIG1hcmtBc0RlY29yYXRlZChkZWYpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBVbnRpbERlc3Ryb3kob3B0aW9uczogVW50aWxEZXN0cm95T3B0aW9ucyA9IHt9KTogQ2xhc3NEZWNvcmF0b3Ige1xuICByZXR1cm4gKHRhcmdldDogYW55KSA9PiB7XG4gICAgaWYgKGlzSW5qZWN0YWJsZVR5cGUodGFyZ2V0KSkge1xuICAgICAgZGVjb3JhdGVQcm92aWRlcih0YXJnZXQsIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWNvcmF0ZURlY2xhcmFibGUodGFyZ2V0LCBvcHRpb25zKTtcbiAgICB9XG4gIH07XG59XG4iXX0=