import { Subject } from 'rxjs';
import { getDef, isInjectableType } from './ivy';
export function isFunction(target) {
    return typeof target === 'function';
}
/**
 * Applied to instances and stores `Subject` instance when
 * no custom destroy method is provided.
 */
var DESTROY = Symbol('__destroy');
/**
 * Applied to definitions and informs that class is decorated
 */
var DECORATOR_APPLIED = Symbol('__decoratorApplied');
/**
 * If we use the `untilDestroyed` operator multiple times inside the single
 * instance providing different `destroyMethodName`, then all streams will
 * subscribe to the single subject. If any method is invoked, the subject will
 * emit and all streams will be unsubscribed. We wan't to prevent this behavior,
 * thus we store subjects under different symbols.
 */
export function getSymbol(destroyMethodName) {
    if (typeof destroyMethodName === 'string') {
        return Symbol("__destroy__" + destroyMethodName);
    }
    else {
        return DESTROY;
    }
}
export function missingDecorator(providerOrDef) {
    return !providerOrDef[DECORATOR_APPLIED];
}
export function markAsDecorated(providerOrDef) {
    providerOrDef[DECORATOR_APPLIED] = true;
}
export function ensureClassIsDecorated(instance) {
    var constructor = instance.constructor;
    var providerOrDef = isInjectableType(constructor) ? constructor : getDef(constructor);
    if (missingDecorator(providerOrDef)) {
        throw new Error('untilDestroyed operator cannot be used inside directives or ' +
            'components or providers that are not decorated with UntilDestroy decorator');
    }
}
export function createSubjectOnTheInstance(instance, symbol) {
    if (!instance[symbol]) {
        instance[symbol] = new Subject();
    }
}
export function completeSubjectOnTheInstance(instance, symbol) {
    if (instance[symbol]) {
        instance[symbol].next();
        instance[symbol].complete();
        // We also have to re-assign this property thus in the future
        // we will be able to create new subject on the same instance.
        instance[symbol] = null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nbmVhdC91bnRpbC1kZXN0cm95LyIsInNvdXJjZXMiOlsibGliL2ludGVybmFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRS9CLE9BQU8sRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFFakQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxNQUFlO0lBQ3hDLE9BQU8sT0FBTyxNQUFNLEtBQUssVUFBVSxDQUFDO0FBQ3RDLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxJQUFNLE9BQU8sR0FBa0IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRW5EOztHQUVHO0FBQ0gsSUFBTSxpQkFBaUIsR0FBa0IsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFFdEU7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FBSSxpQkFBMkI7SUFDdEQsSUFBSSxPQUFPLGlCQUFpQixLQUFLLFFBQVEsRUFBRTtRQUN6QyxPQUFPLE1BQU0sQ0FBQyxnQkFBYyxpQkFBbUIsQ0FBQyxDQUFDO0tBQ2xEO1NBQU07UUFDTCxPQUFPLE9BQU8sQ0FBQztLQUNoQjtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQzlCLGFBQWlGO0lBRWpGLE9BQU8sQ0FBRSxhQUFxQixDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDcEQsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQzdCLGFBQWlGO0lBRWhGLGFBQXFCLENBQUMsaUJBQWlCLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDbkQsQ0FBQztBQVFELE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxRQUFhO0lBQ2xELElBQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUM7SUFDekMsSUFBTSxhQUFhLEdBQUcsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRXhGLElBQUksZ0JBQWdCLENBQUMsYUFBYSxDQUFDLEVBQUU7UUFDbkMsTUFBTSxJQUFJLEtBQUssQ0FDYiw4REFBOEQ7WUFDNUQsNEVBQTRFLENBQy9FLENBQUM7S0FDSDtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsMEJBQTBCLENBQUMsUUFBYSxFQUFFLE1BQWM7SUFDdEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUNyQixRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztLQUN4QztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsNEJBQTRCLENBQUMsUUFBYSxFQUFFLE1BQWM7SUFDeEUsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDcEIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3hCLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM1Qiw2REFBNkQ7UUFDN0QsOERBQThEO1FBQzlELFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7S0FDekI7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSW5qZWN0YWJsZVR5cGUsXG4gIMm1UGlwZURlZiBhcyBQaXBlRGVmLFxuICDJtUNvbXBvbmVudERlZiBhcyBDb21wb25lbnREZWYsXG4gIMm1RGlyZWN0aXZlRGVmIGFzIERpcmVjdGl2ZURlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgZ2V0RGVmLCBpc0luamVjdGFibGVUeXBlIH0gZnJvbSAnLi9pdnknO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih0YXJnZXQ6IHVua25vd24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbic7XG59XG5cbi8qKlxuICogQXBwbGllZCB0byBpbnN0YW5jZXMgYW5kIHN0b3JlcyBgU3ViamVjdGAgaW5zdGFuY2Ugd2hlblxuICogbm8gY3VzdG9tIGRlc3Ryb3kgbWV0aG9kIGlzIHByb3ZpZGVkLlxuICovXG5jb25zdCBERVNUUk9ZOiB1bmlxdWUgc3ltYm9sID0gU3ltYm9sKCdfX2Rlc3Ryb3knKTtcblxuLyoqXG4gKiBBcHBsaWVkIHRvIGRlZmluaXRpb25zIGFuZCBpbmZvcm1zIHRoYXQgY2xhc3MgaXMgZGVjb3JhdGVkXG4gKi9cbmNvbnN0IERFQ09SQVRPUl9BUFBMSUVEOiB1bmlxdWUgc3ltYm9sID0gU3ltYm9sKCdfX2RlY29yYXRvckFwcGxpZWQnKTtcblxuLyoqXG4gKiBJZiB3ZSB1c2UgdGhlIGB1bnRpbERlc3Ryb3llZGAgb3BlcmF0b3IgbXVsdGlwbGUgdGltZXMgaW5zaWRlIHRoZSBzaW5nbGVcbiAqIGluc3RhbmNlIHByb3ZpZGluZyBkaWZmZXJlbnQgYGRlc3Ryb3lNZXRob2ROYW1lYCwgdGhlbiBhbGwgc3RyZWFtcyB3aWxsXG4gKiBzdWJzY3JpYmUgdG8gdGhlIHNpbmdsZSBzdWJqZWN0LiBJZiBhbnkgbWV0aG9kIGlzIGludm9rZWQsIHRoZSBzdWJqZWN0IHdpbGxcbiAqIGVtaXQgYW5kIGFsbCBzdHJlYW1zIHdpbGwgYmUgdW5zdWJzY3JpYmVkLiBXZSB3YW4ndCB0byBwcmV2ZW50IHRoaXMgYmVoYXZpb3IsXG4gKiB0aHVzIHdlIHN0b3JlIHN1YmplY3RzIHVuZGVyIGRpZmZlcmVudCBzeW1ib2xzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3ltYm9sPFQ+KGRlc3Ryb3lNZXRob2ROYW1lPzoga2V5b2YgVCk6IHN5bWJvbCB7XG4gIGlmICh0eXBlb2YgZGVzdHJveU1ldGhvZE5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIFN5bWJvbChgX19kZXN0cm95X18ke2Rlc3Ryb3lNZXRob2ROYW1lfWApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBERVNUUk9ZO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtaXNzaW5nRGVjb3JhdG9yPFQ+KFxuICBwcm92aWRlck9yRGVmOiBJbmplY3RhYmxlVHlwZTxUPiB8IFBpcGVEZWY8VD4gfCBDb21wb25lbnREZWY8VD4gfCBEaXJlY3RpdmVEZWY8VD5cbik6IGJvb2xlYW4ge1xuICByZXR1cm4gIShwcm92aWRlck9yRGVmIGFzIGFueSlbREVDT1JBVE9SX0FQUExJRURdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFya0FzRGVjb3JhdGVkPFQ+KFxuICBwcm92aWRlck9yRGVmOiBJbmplY3RhYmxlVHlwZTxUPiB8IFBpcGVEZWY8VD4gfCBDb21wb25lbnREZWY8VD4gfCBEaXJlY3RpdmVEZWY8VD5cbik6IHZvaWQge1xuICAocHJvdmlkZXJPckRlZiBhcyBhbnkpW0RFQ09SQVRPUl9BUFBMSUVEXSA9IHRydWU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVW50aWxEZXN0cm95T3B0aW9ucyB7XG4gIGJsYWNrTGlzdD86IHN0cmluZ1tdO1xuICBhcnJheU5hbWU/OiBzdHJpbmc7XG4gIGNoZWNrUHJvcGVydGllcz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVDbGFzc0lzRGVjb3JhdGVkKGluc3RhbmNlOiBhbnkpOiBuZXZlciB8IHZvaWQge1xuICBjb25zdCBjb25zdHJ1Y3RvciA9IGluc3RhbmNlLmNvbnN0cnVjdG9yO1xuICBjb25zdCBwcm92aWRlck9yRGVmID0gaXNJbmplY3RhYmxlVHlwZShjb25zdHJ1Y3RvcikgPyBjb25zdHJ1Y3RvciA6IGdldERlZihjb25zdHJ1Y3Rvcik7XG5cbiAgaWYgKG1pc3NpbmdEZWNvcmF0b3IocHJvdmlkZXJPckRlZikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAndW50aWxEZXN0cm95ZWQgb3BlcmF0b3IgY2Fubm90IGJlIHVzZWQgaW5zaWRlIGRpcmVjdGl2ZXMgb3IgJyArXG4gICAgICAgICdjb21wb25lbnRzIG9yIHByb3ZpZGVycyB0aGF0IGFyZSBub3QgZGVjb3JhdGVkIHdpdGggVW50aWxEZXN0cm95IGRlY29yYXRvcidcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdWJqZWN0T25UaGVJbnN0YW5jZShpbnN0YW5jZTogYW55LCBzeW1ib2w6IHN5bWJvbCk6IHZvaWQge1xuICBpZiAoIWluc3RhbmNlW3N5bWJvbF0pIHtcbiAgICBpbnN0YW5jZVtzeW1ib2xdID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGxldGVTdWJqZWN0T25UaGVJbnN0YW5jZShpbnN0YW5jZTogYW55LCBzeW1ib2w6IHN5bWJvbCk6IHZvaWQge1xuICBpZiAoaW5zdGFuY2Vbc3ltYm9sXSkge1xuICAgIGluc3RhbmNlW3N5bWJvbF0ubmV4dCgpO1xuICAgIGluc3RhbmNlW3N5bWJvbF0uY29tcGxldGUoKTtcbiAgICAvLyBXZSBhbHNvIGhhdmUgdG8gcmUtYXNzaWduIHRoaXMgcHJvcGVydHkgdGh1cyBpbiB0aGUgZnV0dXJlXG4gICAgLy8gd2Ugd2lsbCBiZSBhYmxlIHRvIGNyZWF0ZSBuZXcgc3ViamVjdCBvbiB0aGUgc2FtZSBpbnN0YW5jZS5cbiAgICBpbnN0YW5jZVtzeW1ib2xdID0gbnVsbDtcbiAgfVxufVxuIl19