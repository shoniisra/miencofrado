import { getSymbol, isFunction, markAsDecorated, missingDecorator, completeSubjectOnTheInstance } from './internals';
import { getDef, getDefName, isInjectableType } from './ivy';
function unsubscribe(property) {
    property && isFunction(property.unsubscribe) && property.unsubscribe();
}
function unsubscribeIfPropertyIsArrayLike(property) {
    Array.isArray(property) && property.forEach(unsubscribe);
}
function decorateNgOnDestroy(ngOnDestroy, _a) {
    var arrayName = _a.arrayName, checkProperties = _a.checkProperties, blackList = _a.blackList;
    return function () {
        // Invoke the original `ngOnDestroy` if it exists
        ngOnDestroy && ngOnDestroy.call(this);
        // It's important to use `this` instead of caching instance
        // that may lead to memory leaks
        completeSubjectOnTheInstance(this, getSymbol());
        // Check if subscriptions are pushed to some array
        if (arrayName) {
            return unsubscribeIfPropertyIsArrayLike(this[arrayName]);
        }
        // Loop through the properties and find subscriptions
        if (checkProperties) {
            for (var property in this) {
                if (blackList && blackList.includes(property)) {
                    continue;
                }
                unsubscribe(this[property]);
            }
        }
    };
}
/**
 * Services do not have definitions, thus we just have to override the
 * prototype property in Ivy
 */
function decorateProvider(type, options) {
    type.prototype.ngOnDestroy = decorateNgOnDestroy(type.prototype.ngOnDestroy, options);
    markAsDecorated(type);
}
/**
 * https://github.com/ngneat/until-destroy/issues/78
 * Some declared components or directives may be compiled asynchronously in JIT,
 * especially those that're lazy-loaded. And thus may have their
 * definition not accessible yet.
 */
function decorateDeclarableJIT(type, options) {
    var defName = getDefName(type);
    var getter = Object.getOwnPropertyDescriptor(type, defName).get;
    Object.defineProperty(type, defName, {
        get: function () {
            var def = getter();
            if (missingDecorator(def)) {
                def.onDestroy = decorateNgOnDestroy(def.onDestroy, options);
                markAsDecorated(def);
            }
            return def;
        }
    });
}
function decorateDeclarable(type, options) {
    var isJIT = type.hasOwnProperty('__annotations__');
    if (isJIT) {
        decorateDeclarableJIT(type, options);
    }
    else {
        var def = getDef(type);
        def.onDestroy = decorateNgOnDestroy(def.onDestroy, options);
        markAsDecorated(def);
    }
}
export function UntilDestroy(options) {
    if (options === void 0) { options = {}; }
    return function (target) {
        if (isInjectableType(target)) {
            decorateProvider(target, options);
        }
        else {
            decorateDeclarable(target, options);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW50aWwtZGVzdHJveS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ25lYXQvdW50aWwtZGVzdHJveS8iLCJzb3VyY2VzIjpbImxpYi91bnRpbC1kZXN0cm95LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLGVBQWUsRUFDZixnQkFBZ0IsRUFFaEIsNEJBQTRCLEVBQzdCLE1BQU0sYUFBYSxDQUFDO0FBQ3JCLE9BQU8sRUFBWSxNQUFNLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRXZFLFNBQVMsV0FBVyxDQUFDLFFBQXNDO0lBQ3pELFFBQVEsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN6RSxDQUFDO0FBRUQsU0FBUyxnQ0FBZ0MsQ0FBQyxRQUFlO0lBQ3ZELEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBRUQsU0FBUyxtQkFBbUIsQ0FDMUIsV0FBNEMsRUFDNUMsRUFBOEQ7UUFBNUQsd0JBQVMsRUFBRSxvQ0FBZSxFQUFFLHdCQUFTO0lBRXZDLE9BQU87UUFDTCxpREFBaUQ7UUFDakQsV0FBVyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdEMsMkRBQTJEO1FBQzNELGdDQUFnQztRQUNoQyw0QkFBNEIsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUVoRCxrREFBa0Q7UUFDbEQsSUFBSSxTQUFTLEVBQUU7WUFDYixPQUFPLGdDQUFnQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1NBQzFEO1FBRUQscURBQXFEO1FBQ3JELElBQUksZUFBZSxFQUFFO1lBQ25CLEtBQUssSUFBTSxRQUFRLElBQUksSUFBSSxFQUFFO2dCQUMzQixJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO29CQUM3QyxTQUFTO2lCQUNWO2dCQUVELFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzthQUM3QjtTQUNGO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVEOzs7R0FHRztBQUNILFNBQVMsZ0JBQWdCLENBQUMsSUFBNkIsRUFBRSxPQUE0QjtJQUNuRixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN0RixlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDeEIsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBUyxxQkFBcUIsQ0FDNUIsSUFBdUQsRUFDdkQsT0FBNEI7SUFFNUIsSUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pDLElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFFLENBQUMsR0FBSSxDQUFDO0lBRXBFLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRTtRQUNuQyxHQUFHLEVBQUg7WUFDRSxJQUFNLEdBQUcsR0FBRyxNQUFNLEVBQUUsQ0FBQztZQUVyQixJQUFJLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN4QixHQUFpQyxDQUFDLFNBQVMsR0FBRyxtQkFBbUIsQ0FDaEUsR0FBRyxDQUFDLFNBQVMsRUFDYixPQUFPLENBQ1IsQ0FBQztnQkFDRixlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDdEI7WUFFRCxPQUFPLEdBQUcsQ0FBQztRQUNiLENBQUM7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FDekIsSUFBdUQsRUFDdkQsT0FBNEI7SUFFNUIsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRXJELElBQUksS0FBSyxFQUFFO1FBQ1QscUJBQXFCLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ3RDO1NBQU07UUFDTCxJQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEIsR0FBaUMsQ0FBQyxTQUFTLEdBQUcsbUJBQW1CLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMzRixlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDdEI7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxPQUFpQztJQUFqQyx3QkFBQSxFQUFBLFlBQWlDO0lBQzVELE9BQU8sVUFBQyxNQUFXO1FBQ2pCLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDNUIsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ25DO2FBQU07WUFDTCxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDckM7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSW5qZWN0YWJsZVR5cGUsXG4gIMm1Q29tcG9uZW50VHlwZSBhcyBDb21wb25lbnRUeXBlLFxuICDJtURpcmVjdGl2ZVR5cGUgYXMgRGlyZWN0aXZlVHlwZVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbkxpa2UgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtcbiAgZ2V0U3ltYm9sLFxuICBpc0Z1bmN0aW9uLFxuICBtYXJrQXNEZWNvcmF0ZWQsXG4gIG1pc3NpbmdEZWNvcmF0b3IsXG4gIFVudGlsRGVzdHJveU9wdGlvbnMsXG4gIGNvbXBsZXRlU3ViamVjdE9uVGhlSW5zdGFuY2Vcbn0gZnJvbSAnLi9pbnRlcm5hbHMnO1xuaW1wb3J0IHsgUGlwZVR5cGUsIGdldERlZiwgZ2V0RGVmTmFtZSwgaXNJbmplY3RhYmxlVHlwZSB9IGZyb20gJy4vaXZ5JztcblxuZnVuY3Rpb24gdW5zdWJzY3JpYmUocHJvcGVydHk6IFN1YnNjcmlwdGlvbkxpa2UgfCB1bmRlZmluZWQpOiB2b2lkIHtcbiAgcHJvcGVydHkgJiYgaXNGdW5jdGlvbihwcm9wZXJ0eS51bnN1YnNjcmliZSkgJiYgcHJvcGVydHkudW5zdWJzY3JpYmUoKTtcbn1cblxuZnVuY3Rpb24gdW5zdWJzY3JpYmVJZlByb3BlcnR5SXNBcnJheUxpa2UocHJvcGVydHk6IGFueVtdKTogdm9pZCB7XG4gIEFycmF5LmlzQXJyYXkocHJvcGVydHkpICYmIHByb3BlcnR5LmZvckVhY2godW5zdWJzY3JpYmUpO1xufVxuXG5mdW5jdGlvbiBkZWNvcmF0ZU5nT25EZXN0cm95KFxuICBuZ09uRGVzdHJveTogKCgpID0+IHZvaWQpIHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgeyBhcnJheU5hbWUsIGNoZWNrUHJvcGVydGllcywgYmxhY2tMaXN0IH06IFVudGlsRGVzdHJveU9wdGlvbnNcbikge1xuICByZXR1cm4gZnVuY3Rpb24odGhpczogYW55KSB7XG4gICAgLy8gSW52b2tlIHRoZSBvcmlnaW5hbCBgbmdPbkRlc3Ryb3lgIGlmIGl0IGV4aXN0c1xuICAgIG5nT25EZXN0cm95ICYmIG5nT25EZXN0cm95LmNhbGwodGhpcyk7XG5cbiAgICAvLyBJdCdzIGltcG9ydGFudCB0byB1c2UgYHRoaXNgIGluc3RlYWQgb2YgY2FjaGluZyBpbnN0YW5jZVxuICAgIC8vIHRoYXQgbWF5IGxlYWQgdG8gbWVtb3J5IGxlYWtzXG4gICAgY29tcGxldGVTdWJqZWN0T25UaGVJbnN0YW5jZSh0aGlzLCBnZXRTeW1ib2woKSk7XG5cbiAgICAvLyBDaGVjayBpZiBzdWJzY3JpcHRpb25zIGFyZSBwdXNoZWQgdG8gc29tZSBhcnJheVxuICAgIGlmIChhcnJheU5hbWUpIHtcbiAgICAgIHJldHVybiB1bnN1YnNjcmliZUlmUHJvcGVydHlJc0FycmF5TGlrZSh0aGlzW2FycmF5TmFtZV0pO1xuICAgIH1cblxuICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgcHJvcGVydGllcyBhbmQgZmluZCBzdWJzY3JpcHRpb25zXG4gICAgaWYgKGNoZWNrUHJvcGVydGllcykge1xuICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiB0aGlzKSB7XG4gICAgICAgIGlmIChibGFja0xpc3QgJiYgYmxhY2tMaXN0LmluY2x1ZGVzKHByb3BlcnR5KSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdW5zdWJzY3JpYmUodGhpc1twcm9wZXJ0eV0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBTZXJ2aWNlcyBkbyBub3QgaGF2ZSBkZWZpbml0aW9ucywgdGh1cyB3ZSBqdXN0IGhhdmUgdG8gb3ZlcnJpZGUgdGhlXG4gKiBwcm90b3R5cGUgcHJvcGVydHkgaW4gSXZ5XG4gKi9cbmZ1bmN0aW9uIGRlY29yYXRlUHJvdmlkZXIodHlwZTogSW5qZWN0YWJsZVR5cGU8dW5rbm93bj4sIG9wdGlvbnM6IFVudGlsRGVzdHJveU9wdGlvbnMpOiB2b2lkIHtcbiAgdHlwZS5wcm90b3R5cGUubmdPbkRlc3Ryb3kgPSBkZWNvcmF0ZU5nT25EZXN0cm95KHR5cGUucHJvdG90eXBlLm5nT25EZXN0cm95LCBvcHRpb25zKTtcbiAgbWFya0FzRGVjb3JhdGVkKHR5cGUpO1xufVxuXG4vKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ25lYXQvdW50aWwtZGVzdHJveS9pc3N1ZXMvNzhcbiAqIFNvbWUgZGVjbGFyZWQgY29tcG9uZW50cyBvciBkaXJlY3RpdmVzIG1heSBiZSBjb21waWxlZCBhc3luY2hyb25vdXNseSBpbiBKSVQsXG4gKiBlc3BlY2lhbGx5IHRob3NlIHRoYXQncmUgbGF6eS1sb2FkZWQuIEFuZCB0aHVzIG1heSBoYXZlIHRoZWlyXG4gKiBkZWZpbml0aW9uIG5vdCBhY2Nlc3NpYmxlIHlldC5cbiAqL1xuZnVuY3Rpb24gZGVjb3JhdGVEZWNsYXJhYmxlSklUPFQ+KFxuICB0eXBlOiBQaXBlVHlwZTxUPiB8IENvbXBvbmVudFR5cGU8VD4gfCBEaXJlY3RpdmVUeXBlPFQ+LFxuICBvcHRpb25zOiBVbnRpbERlc3Ryb3lPcHRpb25zXG4pIHtcbiAgY29uc3QgZGVmTmFtZSA9IGdldERlZk5hbWUodHlwZSk7XG4gIGNvbnN0IGdldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodHlwZSwgZGVmTmFtZSkhLmdldCE7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHR5cGUsIGRlZk5hbWUsIHtcbiAgICBnZXQoKSB7XG4gICAgICBjb25zdCBkZWYgPSBnZXR0ZXIoKTtcblxuICAgICAgaWYgKG1pc3NpbmdEZWNvcmF0b3IoZGVmKSkge1xuICAgICAgICAoZGVmIGFzIHsgb25EZXN0cm95OiAoKSA9PiB2b2lkIH0pLm9uRGVzdHJveSA9IGRlY29yYXRlTmdPbkRlc3Ryb3koXG4gICAgICAgICAgZGVmLm9uRGVzdHJveSxcbiAgICAgICAgICBvcHRpb25zXG4gICAgICAgICk7XG4gICAgICAgIG1hcmtBc0RlY29yYXRlZChkZWYpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVmO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGRlY29yYXRlRGVjbGFyYWJsZTxUPihcbiAgdHlwZTogUGlwZVR5cGU8VD4gfCBDb21wb25lbnRUeXBlPFQ+IHwgRGlyZWN0aXZlVHlwZTxUPixcbiAgb3B0aW9uczogVW50aWxEZXN0cm95T3B0aW9uc1xuKSB7XG4gIGNvbnN0IGlzSklUID0gdHlwZS5oYXNPd25Qcm9wZXJ0eSgnX19hbm5vdGF0aW9uc19fJyk7XG5cbiAgaWYgKGlzSklUKSB7XG4gICAgZGVjb3JhdGVEZWNsYXJhYmxlSklUKHR5cGUsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGRlZiA9IGdldERlZih0eXBlKTtcbiAgICAoZGVmIGFzIHsgb25EZXN0cm95OiAoKSA9PiB2b2lkIH0pLm9uRGVzdHJveSA9IGRlY29yYXRlTmdPbkRlc3Ryb3koZGVmLm9uRGVzdHJveSwgb3B0aW9ucyk7XG4gICAgbWFya0FzRGVjb3JhdGVkKGRlZik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFVudGlsRGVzdHJveShvcHRpb25zOiBVbnRpbERlc3Ryb3lPcHRpb25zID0ge30pOiBDbGFzc0RlY29yYXRvciB7XG4gIHJldHVybiAodGFyZ2V0OiBhbnkpID0+IHtcbiAgICBpZiAoaXNJbmplY3RhYmxlVHlwZSh0YXJnZXQpKSB7XG4gICAgICBkZWNvcmF0ZVByb3ZpZGVyKHRhcmdldCwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlY29yYXRlRGVjbGFyYWJsZSh0YXJnZXQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==