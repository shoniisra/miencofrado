{"version":3,"sources":["ng://@ngneat/until-destroy/lib/ivy.ts","ng://@ngneat/until-destroy/lib/internals.ts","ng://@ngneat/until-destroy/lib/until-destroy.ts","ng://@ngneat/until-destroy/lib/until-destroyed.ts"],"names":["NG_DIR_DEF","ɵNG_DIR_DEF","NG_COMP_DEF","ɵNG_COMP_DEF","NG_PIPE_DEF","ɵNG_PIPE_DEF","getDef","type","isInjectableType","target","ɵNG_PROV_DEF","isFunction","DESTROY","Symbol","DECORATOR_APPLIED","getSymbol","destroyMethodName","missingDecorator","providerOrDef","markAsDecorated","createSubjectOnTheInstance","instance","symbol","Subject","completeSubjectOnTheInstance","next","complete","unsubscribe","property","decorateNgOnDestroy","ngOnDestroy","_a","arrayName","checkProperties","blackList","call","this","Array","isArray","forEach","unsubscribeIfPropertyIsArrayLike","includes","decorateDeclarableJIT","options","defName","hasOwnProperty","getDefName","getter","Object","getOwnPropertyDescriptor","get","defineProperty","def","onDestroy","prototype","decorateProvider","decorateDeclarable","source","originalDestroy","Error","constructor","name","apply","arguments","overrideNonDirectiveInstanceMethod","ensureClassIsDecorated","pipe","takeUntil"],"mappings":"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","sourcesContent":["import {\n  Type,\n  InjectableType,\n  ɵNG_DIR_DEF,\n  ɵNG_COMP_DEF,\n  ɵNG_PIPE_DEF,\n  ɵNG_PROV_DEF,\n  ɵComponentType as ComponentType,\n  ɵDirectiveType as DirectiveType,\n  ɵPipeDef as PipeDef,\n  ɵComponentDef as ComponentDef,\n  ɵDirectiveDef as DirectiveDef\n} from '@angular/core';\n\n// This is done for type-safety and to make compiler happy\n// because definition property names are exported as `string`,\n// thus it throws `ɵNG_COMP_DEF can't be used to index type 'ɵComponentType<T>'.`\nconst NG_DIR_DEF = ɵNG_DIR_DEF as 'ɵdir';\nconst NG_COMP_DEF = ɵNG_COMP_DEF as 'ɵcmp';\nconst NG_PIPE_DEF = ɵNG_PIPE_DEF as 'ɵpipe';\n\n// Angular doesn't expose publicly `PipeType` but it actually has it.\nexport interface PipeType<T> extends Type<T> {\n  ɵpipe: never;\n}\n\n// As directive and component definitions are considered private API,\n// so those properties are prefixed with Angular's marker for \"private\".\nexport function getDef<T>(\n  type: PipeType<T> | ComponentType<T> | DirectiveType<T>\n): PipeDef<T> | DirectiveDef<T> | ComponentDef<T> {\n  return (\n    (type as PipeType<T>)[NG_PIPE_DEF] ||\n    (type as ComponentType<T>)[NG_COMP_DEF] ||\n    (type as DirectiveType<T>)[NG_DIR_DEF]\n  );\n}\n\nexport function getDefName<T>(type: PipeType<T> | ComponentType<T> | DirectiveType<T>) {\n  if (type.hasOwnProperty(NG_PIPE_DEF)) {\n    return NG_PIPE_DEF;\n  } else if (type.hasOwnProperty(NG_COMP_DEF)) {\n    return NG_COMP_DEF;\n  } else {\n    return NG_DIR_DEF;\n  }\n}\n\n// Determines whether the provided `target` is some function\n// decorated with `@Injectable()`.\nexport function isInjectableType(target: any): target is InjectableType<never> {\n  return !!target[ɵNG_PROV_DEF];\n}\n","import {\n  InjectableType,\n  ɵPipeDef as PipeDef,\n  ɵComponentDef as ComponentDef,\n  ɵDirectiveDef as DirectiveDef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { getDef, isInjectableType } from './ivy';\n\nexport function isFunction(target: unknown) {\n  return typeof target === 'function';\n}\n\n/**\n * Applied to instances and stores `Subject` instance when\n * no custom destroy method is provided.\n */\nconst DESTROY: unique symbol = Symbol('__destroy');\n\n/**\n * Applied to definitions and informs that class is decorated\n */\nconst DECORATOR_APPLIED: unique symbol = Symbol('__decoratorApplied');\n\n/**\n * If we use the `untilDestroyed` operator multiple times inside the single\n * instance providing different `destroyMethodName`, then all streams will\n * subscribe to the single subject. If any method is invoked, the subject will\n * emit and all streams will be unsubscribed. We wan't to prevent this behavior,\n * thus we store subjects under different symbols.\n */\nexport function getSymbol<T>(destroyMethodName?: keyof T): symbol {\n  if (typeof destroyMethodName === 'string') {\n    return Symbol(`__destroy__${destroyMethodName}`);\n  } else {\n    return DESTROY;\n  }\n}\n\nexport function missingDecorator<T>(\n  providerOrDef: InjectableType<T> | PipeDef<T> | ComponentDef<T> | DirectiveDef<T>\n): boolean {\n  return !(providerOrDef as any)[DECORATOR_APPLIED];\n}\n\nexport function markAsDecorated<T>(\n  providerOrDef: InjectableType<T> | PipeDef<T> | ComponentDef<T> | DirectiveDef<T>\n): void {\n  (providerOrDef as any)[DECORATOR_APPLIED] = true;\n}\n\nexport interface UntilDestroyOptions {\n  blackList?: string[];\n  arrayName?: string;\n  checkProperties?: boolean;\n}\n\nexport function ensureClassIsDecorated(instance: any): never | void {\n  const constructor = instance.constructor;\n  const providerOrDef = isInjectableType(constructor) ? constructor : getDef(constructor);\n\n  if (missingDecorator(providerOrDef)) {\n    throw new Error(\n      'untilDestroyed operator cannot be used inside directives or ' +\n        'components or providers that are not decorated with UntilDestroy decorator'\n    );\n  }\n}\n\nexport function createSubjectOnTheInstance(instance: any, symbol: symbol): void {\n  if (!instance[symbol]) {\n    instance[symbol] = new Subject<void>();\n  }\n}\n\nexport function completeSubjectOnTheInstance(instance: any, symbol: symbol): void {\n  if (instance[symbol]) {\n    instance[symbol].next();\n    instance[symbol].complete();\n    // We also have to re-assign this property thus in the future\n    // we will be able to create new subject on the same instance.\n    instance[symbol] = null;\n  }\n}\n","import {\n  InjectableType,\n  ɵComponentType as ComponentType,\n  ɵDirectiveType as DirectiveType\n} from '@angular/core';\nimport { SubscriptionLike } from 'rxjs';\n\nimport {\n  getSymbol,\n  isFunction,\n  markAsDecorated,\n  missingDecorator,\n  UntilDestroyOptions,\n  completeSubjectOnTheInstance\n} from './internals';\nimport { PipeType, getDef, getDefName, isInjectableType } from './ivy';\n\nfunction unsubscribe(property: SubscriptionLike | undefined): void {\n  property && isFunction(property.unsubscribe) && property.unsubscribe();\n}\n\nfunction unsubscribeIfPropertyIsArrayLike(property: any[]): void {\n  Array.isArray(property) && property.forEach(unsubscribe);\n}\n\nfunction decorateNgOnDestroy(\n  ngOnDestroy: (() => void) | null | undefined,\n  { arrayName, checkProperties, blackList }: UntilDestroyOptions\n) {\n  return function(this: any) {\n    // Invoke the original `ngOnDestroy` if it exists\n    ngOnDestroy && ngOnDestroy.call(this);\n\n    // It's important to use `this` instead of caching instance\n    // that may lead to memory leaks\n    completeSubjectOnTheInstance(this, getSymbol());\n\n    // Check if subscriptions are pushed to some array\n    if (arrayName) {\n      return unsubscribeIfPropertyIsArrayLike(this[arrayName]);\n    }\n\n    // Loop through the properties and find subscriptions\n    if (checkProperties) {\n      for (const property in this) {\n        if (blackList && blackList.includes(property)) {\n          continue;\n        }\n\n        unsubscribe(this[property]);\n      }\n    }\n  };\n}\n\n/**\n * Services do not have definitions, thus we just have to override the\n * prototype property in Ivy\n */\nfunction decorateProvider(type: InjectableType<unknown>, options: UntilDestroyOptions): void {\n  type.prototype.ngOnDestroy = decorateNgOnDestroy(type.prototype.ngOnDestroy, options);\n  markAsDecorated(type);\n}\n\n/**\n * https://github.com/ngneat/until-destroy/issues/78\n * Some declared components or directives may be compiled asynchronously in JIT,\n * especially those that're lazy-loaded. And thus may have their\n * definition not accessible yet.\n */\nfunction decorateDeclarableJIT<T>(\n  type: PipeType<T> | ComponentType<T> | DirectiveType<T>,\n  options: UntilDestroyOptions\n) {\n  const defName = getDefName(type);\n  const getter = Object.getOwnPropertyDescriptor(type, defName)!.get!;\n\n  Object.defineProperty(type, defName, {\n    get() {\n      const def = getter();\n\n      if (missingDecorator(def)) {\n        (def as { onDestroy: () => void }).onDestroy = decorateNgOnDestroy(\n          def.onDestroy,\n          options\n        );\n        markAsDecorated(def);\n      }\n\n      return def;\n    }\n  });\n}\n\nfunction decorateDeclarable<T>(\n  type: PipeType<T> | ComponentType<T> | DirectiveType<T>,\n  options: UntilDestroyOptions\n) {\n  const isJIT = type.hasOwnProperty('__annotations__');\n\n  if (isJIT) {\n    decorateDeclarableJIT(type, options);\n  } else {\n    const def = getDef(type);\n    (def as { onDestroy: () => void }).onDestroy = decorateNgOnDestroy(def.onDestroy, options);\n    markAsDecorated(def);\n  }\n}\n\nexport function UntilDestroy(options: UntilDestroyOptions = {}): ClassDecorator {\n  return (target: any) => {\n    if (isInjectableType(target)) {\n      decorateProvider(target, options);\n    } else {\n      decorateDeclarable(target, options);\n    }\n  };\n}\n","import { Observable } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport {\n  getSymbol,\n  isFunction,\n  createSubjectOnTheInstance,\n  completeSubjectOnTheInstance,\n  ensureClassIsDecorated\n} from './internals';\n\nfunction overrideNonDirectiveInstanceMethod(\n  instance: any,\n  destroyMethodName: string,\n  symbol: symbol\n): void {\n  const originalDestroy = instance[destroyMethodName];\n\n  if (isFunction(originalDestroy) === false) {\n    throw new Error(\n      `${instance.constructor.name} is using untilDestroyed but doesn't implement ${destroyMethodName}`\n    );\n  }\n\n  createSubjectOnTheInstance(instance, symbol);\n\n  instance[destroyMethodName] = function() {\n    isFunction(originalDestroy) && originalDestroy.apply(this, arguments);\n    completeSubjectOnTheInstance(this, symbol);\n    // We have to re-assign this property back to the original value.\n    // If the `untilDestroyed` operator is called for the same instance\n    // multiple times, then we will be able to get the original\n    // method again and not the patched one.\n    instance[destroyMethodName] = originalDestroy;\n  };\n}\n\nexport function untilDestroyed<T>(instance: T, destroyMethodName?: keyof T) {\n  return <U>(source: Observable<U>) => {\n    const symbol = getSymbol<T>(destroyMethodName);\n\n    // If `destroyMethodName` is passed then the developer applies\n    // this operator to something non-related to Angular DI system\n    if (typeof destroyMethodName === 'string') {\n      overrideNonDirectiveInstanceMethod(instance, destroyMethodName, symbol);\n    } else {\n      ensureClassIsDecorated(instance);\n      createSubjectOnTheInstance(instance, symbol);\n    }\n\n    return source.pipe(takeUntil<U>((instance as any)[symbol]));\n  };\n}\n"]}