{"version":3,"file":"ngx-showdown.js","sources":["ng:/ngx-showdown/showdown-config.provider.ts","ng:/ngx-showdown/showdown-converter.provider.ts","ng:/ngx-showdown/showdown.component.ts","ng:/ngx-showdown/source.directive.ts","ng:/ngx-showdown/showdown.pipe.ts","ng:/ngx-showdown/showdown.module.ts","ng:/ngx-showdown/ngx-showdown.ts"],"names":["hasOwnProperty","Showdown.Converter"],"mappings":"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","sourcesContent":["import * as Showdown from 'showdown';\n\n/**\n * @internal\n */\nlet {hasOwnProperty} = {};\n\nexport interface ShowdownConfig extends Showdown.ConverterOptions {\n}\n\n/**\n * A config provider\n *\n * ### Example\n *\n * Set custom config provider.\n * ```typescript\n * import { NgModel } from '@angular/core';\n * import { ShowdownModule, ShowdownConfig } from 'ngx-showdown';\n *\n * export class MyShowdownConfig extends ShowdownConfig {\n *   emoji = true;\n *   underscore = false;\n *   flavor = 'github';\n * }\n *\n * @NgModel({\n *   imports: [ ShowdownModule ],\n *   providers: [ {provide: ShowdownConfig, useClass: MyConverterOptions} ]\n * })\n * export class AppModule {}\n * ```\n */\nexport class ShowdownConfig implements Showdown.ConverterOptions {\n\n  /**\n   * @see https://github.com/showdownjs/showdown/blob/master/README.md#flavors\n   */\n  flavor?: Showdown.Flavor;\n\n  constructor(options?: ShowdownConfig | Showdown.ConverterOptions) {\n    this.merge(options);\n  }\n\n  /**\n   * Merge options\n   *\n   * @param options - A options object to merge.\n   */\n  public merge?(options: ShowdownConfig | Showdown.ConverterOptions) {\n    for (let key in options) {\n      if (hasOwnProperty.call(options, key)) {\n        this[key] = options[key];\n      }\n    }\n  }\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, use {@link ShowdownConfig} or {@link Showdown.ConverterOptions} instead.\n */\nexport declare let ConverterOptions: typeof ShowdownConfig;\n\n/**\n * @ignore\n * @deprecated from v5, use {@link ShowdownConfig} or {@link Showdown.ConverterOptions} instead.\n */\nexport declare let BaseConverterOptions: typeof ShowdownConfig;\n","import { Injectable, Optional } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\n\n/**\n * @internal\n */\nlet {hasOwnProperty} = {};\n\n/**\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @NgModule({\n *   providers: [ ShowdownConverter ];\n * })\n * export class AppModule {}\n * ```\n *\n * Use the converter instance.\n * ```typescript\n * import { Injectable } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @Injectable()\n * export class SomeService {\n *   constructor(showdownConverter: ShowdownConverter) {\n *     let markdown: string = \"**Some**\";\n *     let html: string = showdownConverter.makeHtml(markdown);\n *     console.log(`some:\\nmarkdown: ${markdown)\\nhtml: ${html}\\n`);\n *   }\n * }\n * ```\n */\n@Injectable()\nexport class ShowdownConverter extends Showdown.Converter {\n\n  constructor(@Optional() config?: ShowdownConfig) {\n    super(config && {extensions: config.extensions});\n    this.setFlavor((config && config.flavor) || 'vanilla');\n    this.setOptions(config);\n  }\n\n  /**\n   * Set options to the converter.\n   *\n   * @param options - A options object to set.\n   */\n  public setOptions(options: Showdown.ShowdownOptions): void {\n    for (let key in options) {\n      if (hasOwnProperty.call(options, key)) {\n        this.setOption(key, options[key]);\n      }\n    }\n  }\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, use {@link Showdown.ConverterOptions} instead.\n */\nexport interface IConverterOptions extends Showdown.ConverterOptions {\n}\n\n/**\n * @ignore\n * @deprecated from v5, use {@link Showdown.ShowdownOptions} instead.\n */\nexport interface IConverterOptionsChangeable extends Showdown.ShowdownOptions {\n}\n","import { Component, ElementRef, Input, OnChanges, OnInit, Optional, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\nimport { ShowdownConverter } from './showdown-converter.provider';\n\n/**\n * @internal\n */\nconst MAP_OPTION = {\n  '': true,\n  true: true,\n  false: false\n};\n\n/**\n * @internal\n */\nlet _toOption = (value: any) => MAP_OPTION.hasOwnProperty(value) ? MAP_OPTION[value] : value;\n\n/**\n * The options keys for the dynamic properties set.\n * @internal\n */\nconst OPTIONS_PROPERTIES_KEYS: string[] = [\n  'backslashEscapesHTMLTags',\n  'completeHTMLDocument',\n  'disableForced4SpacesIndentedSublists',\n  'emoji',\n  'encodeEmails',\n  'ghCodeBlocks',\n  'ghCompatibleHeaderId',\n  'ghMentions',\n  'ghMentionsLink',\n  'headerLevelStart',\n  'literalMidWordAsterisks',\n  'literalMidWordUnderscores',\n  'metadata',\n  'noHeaderId',\n  'omitExtraWLInCodeBlocks',\n  'openLinksInNewWindow',\n  'parseImgDimensions',\n  'prefixHeaderId',\n  'rawHeaderId',\n  'rawPrefixHeaderId',\n  'requireSpaceBeforeHeadingText',\n  'simpleLineBreaks',\n  'simplifiedAutoLink',\n  'smartIndentationFix',\n  'smoothLivePreview',\n  'splitAdjacentBlockquotes',\n  'strikethrough',\n  'tables',\n  'tablesHeaderId',\n  'tasklists',\n  'underline'\n];\n\n// For the options setter properties that dynamic definition (the code after the class)\nexport interface ShowdownComponent extends Showdown.ShowdownOptions {\n}\n\n/**\n * A angular component for render `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownComponent } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownComponent ];\n * })\n * export class AppModule {}\n * ```\n *\n * Bind markdown value and options object\n * ```typescript\n * import { Component } from '@angular/core';\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: '<showdown [value]=\"text\" [options]=\"options\"></showdown>'\n * })\n * export class SomeComponent {\n *   text: string = `\n *     # Some header\n *     ---\n *     **Some bold**\n *   `;\n *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };\n *   // ...\n * }\n * ```\n * Bind single option (it have properties for all showdown options).\n * ```html\n * <showdown emoji=\"true\"  noHeaderId># Some text :+1:</showdown>\n * ```\n *\n * Set static markdown value.\n * ```html\n * <showdown value=\"___Some static value___\" underline></showdown>\n * ```\n *\n * Use as directive on anther element.\n * ```html\n * <div showdown=\"# Div Element\" headerLevelStart=\"2\"></div>\n * ```\n *\n * Static markdown value in the element content.\n * ```html\n * <div>\n *    <showdown smartIndentationFix>\n *       # List:\n *       * a\n *            * A\n *       * b\n *    </showdown>\n * </div>\n * ```\n *\n * Set template reference variable.\n * ```html\n * <showdown #sd></showdown>\n * ```\n * Or\n * ```html\n * <div showdown #sd=\"showdown\"></div>\n * ```\n */\n@Component({\n  selector: 'showdown,[showdown]',\n  template: '<ng-content></ng-content>',\n  exportAs: 'showdown',\n  inputs: OPTIONS_PROPERTIES_KEYS\n})\nexport class ShowdownComponent extends ShowdownConverter implements OnInit, OnChanges, Showdown.ShowdownOptions {\n\n  /**\n   * The input markdown value.\n   *\n   * __Example :__\n   *\n   * Set some static markdown value.\n   * ```html\n   * <showdown value=\"**Some bold value**\"></showdown>\n   * ```\n   *\n   * Bind property with markdown value.\n   * ```html\n   * <textarea [(ngModel)]=\"text\"></textarea>\n   * <showdown [value]=\"text\"></showdown>\n   * ```\n   */\n  @Input() value: string;\n\n  /**\n   * Input alias to `value`.\n   *\n   * __Example :__\n   *\n   * ```html\n   * <div [showdown]=\"# Some Header\"></div>\n   * ```\n   *\n   * Equivalent to\n   * ```html\n   * <showdown [value]=\"# Some Header\"></showdown>\n   * ```\n   */\n  @Input() set showdown(value: string) {\n    this.value = value;\n  }\n\n  /**\n   * The showdown options of the converter.\n   *\n   * __Example :__\n   *\n   * Bind options\n   * ```typescript\n   * import { Component } from '@angular/core';\n   * import * as Showdown from 'showdown';\n   *\n   * @Component({\n   *   selector: `some`,\n   *   template: `<showdown [options]=\"options\"># Some Header<showdown>`\n   * })\n   * export class SomeComponent {\n   *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};\n   *   // ...\n   * }\n   * ```\n   * Or\n   * ```html\n   * <showdown [options]=\"{smartIndentationFix: true}\"> # Indentation Fix<showdown>\n   * ```\n   */\n  @Input()\n  get options(): Showdown.ShowdownOptions {\n    return this.getOptions();\n  }\n\n  set options(options: Showdown.ShowdownOptions) {\n    this.setOptions(options);\n  }\n\n  private _sanitize: boolean;\n\n  /**\n   * Enables html sanitize, it will sanitize the converter html output by [`DomSanitizer`](https://angular.io/api/platform-browser/DomSanitizer#sanitize).\n   *\n   * __Example :__\n   *\n   * ```typescript\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *   selector: 'some',\n   *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n   *   template: `\n   *     <h3>Input</h3>\n   *     <textarea class=\"box\" [(ngModel)]=\"text\"></textarea>\n   *     <input type=\"checkbox\" [(ngModel)]=\"sanitize\"/> <b>Sanitize</b>\n   *     <h3>Markdown</h3>\n   *     <pre class=\"box\"><code>{{ text }}</code></pre>\n   *     <h3>Preview</h3>\n   *     <div class=\"box\">\n   *       <showdown #sd [value]=\"text\" [sanitize]=\"sanitize\"></showdown>\n   *     </div>\n   *   `;\n   * })\n   * export class SomeComponent {\n   *    text: string = `# A cool link\n   * <a href=\"javascript:alert('Hello!')\">click me</a>`;\n   * }\n   * ```\n   */\n  @Input()\n  set sanitize(sanitize: boolean) {\n    this._sanitize = _toOption(sanitize);\n  }\n\n  constructor(private _elementRef: ElementRef, @Optional() private _domSanitizer?: DomSanitizer, @Optional() config?: ShowdownConfig) {\n    super(config);\n  }\n\n  /**\n   * A angular lifecycle method, Use on init to check if it `content` type and load the element `content` to `value`.\n   * @internal\n   */\n  ngOnInit(): void {\n    if (this.value === undefined && this._elementRef.nativeElement.innerHTML.trim() !== '') {\n      this.render(this._elementRef.nativeElement.innerHTML);\n    }\n  }\n\n  /**\n   * A angular lifecycle method, Use to call to render method after changes.\n   * @internal\n   */\n  ngOnChanges(): void {\n    this.render();\n  }\n\n  /**\n   * Convert the markdown value of {@link ShowdownComponent#value} to html and set the html result to the element content.\n   *\n   * __Example :__\n   *\n   * ```html\n   * <textarea #textarea (change)=\"showdown.render(textarea.value)\"/># Some Header</textarea>\n   * <showdown #showdown></showdown>\n   * ```\n   * @param value - A markdown value to render (it will override the current value of `ShowdownComponent#value`)\n   */\n  public render(value?: string): void {\n    if (typeof value === 'string') {\n      this.value = value;\n    }\n\n    if (typeof this.value === 'string') {\n      let result = this.makeHtml(this.value);\n\n      if (this._sanitize) {\n        result = this._domSanitizer.sanitize(SecurityContext.HTML, result);\n      }\n\n      this._elementRef.nativeElement.innerHTML = result;\n    }\n  }\n\n  /**\n   * @ignore\n   * @deprecated from v5, use {@link ShowdownComponent#smartIndentationFix} instead.\n   */\n  // tslint:disable-next-line:member-ordering\n  trimEachLine;\n\n  /**\n   * @ignore\n   * @deprecated from v5,  use {@link ShowdownComponent#render} method instead.\n   */\n  setValue?(value: string): void;\n\n  /**\n   * @ignore\n   * @deprecated from v5, use {@link ShowdownComponent#render} method instead.\n   */\n  compile?(): void;\n\n  /**\n   * @ignore\n   * @deprecated from v5, use `innerHTML` property of the element instead.\n   */\n  toHTML?(): string;\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, renamed `ShowdownDirective` to {@link ShowdownComponent}.\n */\nexport declare let ShowdownDirective: typeof ShowdownComponent;\n\n// Define options properties setter for angular directive and direct access\nfor (let key of OPTIONS_PROPERTIES_KEYS) {\n  Object.defineProperty(ShowdownComponent.prototype, key, {\n    set(value: any): void {\n      this.setOption(key, _toOption(value));\n    },\n    configurable: true\n  });\n}\n","import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Directive, EventEmitter, Input, OnChanges, Output } from '@angular/core';\nimport { ShowdownComponent } from './showdown.component';\n\n/**\n * A angular directive to `ShowdownComponent` for make http request of markdown content.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { HttpClientModule } from '@angular/common/http';\n * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';\n *\n * @NgModule({\n *    declarations: [ ShowdownComponent, SourceDirective ],\n *    imports: [ HttpClientModule ]\n * })\n * export class AppModule {}\n * ```\n *\n * Bind url `src` directive\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *     selector: 'some',\n *     template: '<showdown [src]=\"url\" smartIndentationFix>**Loading...**</showdown>\n * })\n * class SomeComponent {\n *     url: string = 'https://unpkg.com/ngx-showdown/README.md';\n *     // ...\n * }\n * ```\n *\n * Set static url\n * ```html\n * <showdown src=\"README.md\" [options]=\"{noHeaderId: true}\"></showdown>\n * ```\n *\n * Set template reference variable\n * ```html\n * <showdown #source=\"source\" src=\"README.md\"></showdown>\n * ```\n *\n * Listening to `error` events.\n * ```html\n * <showdown #sd src=\"http://url.error\" (error)=\"sd.render('# '+$event.message)\"></showdown>\n * ```\n */\n@Directive({\n  selector: 'showdown[src],[showdown][src]',\n  exportAs: 'source'\n})\nexport class SourceDirective implements OnChanges {\n\n  /**\n   * The source url of the markdown content.\n   *\n   * __Example :__\n   *\n   * Set static url to `src` directive.\n   * ```html\n   * <showdown src=\"https://unpkg.com/ngx-showdown/README.md\"></showdown>\n   * ```\n   *\n   * Bind url to `src` directive.\n   * ```html\n   * <input type=\"text\" #url placeholder=\"url\" />\n   * <button (click)=\"src = url.value\">Load</button>\n   * <showdown [src]=\"src\">**Loading...**</showdown>\n   * ```\n   */\n  @Input() src: string;\n\n  /**\n   * On error occur.\n   *\n   * __Example :__\n   *\n   * ```html\n   * <input type=\"text\" placeholder=\"url\" [(ngModel)]=\"url\"/>\n   * <showdown [src]=\"url\" (error)=\"sd.render('# Error\\n> '+$event.message)\">**Loading...**</showdown>\n   * ```\n   */\n  @Output() error: EventEmitter<HttpErrorResponse> = new EventEmitter();\n\n  constructor(private _showdownComponent: ShowdownComponent, private _http: HttpClient) {\n  }\n\n  /**\n   * A angular lifecycle method, Use to call to `load` method on src init/changes\n   * @internal\n   */\n  ngOnChanges(): void {\n    this.load();\n  }\n\n  /**\n   * Load the markdown content of {@link SourceDirective#src} url to {@link ShowdownComponent#value}.\n   *\n   * __Example :__\n   *\n   * ```html\n   * <input type=\"text\" #url value=\"source.src\" placeholder=\"Url\" />\n   * <button (click)=\"source.load(url.value)\">Load</button>\n   * <showdown #source=\"source\" src=\"https://unpkg.com/ngx-showdown/README.md\"></showdown>\n   * ```\n   * @param url - A url of markdown content to load (it will override the current url of `SourceDirective#src`)\n   */\n  public load(url?: string): void {\n    if (url) {\n      this.src = url;\n    }\n\n    if (this.src) {\n      this\n        ._http\n        .get(this.src, {responseType: 'text'})\n        .subscribe((response: string) => {\n          this._showdownComponent.render(response);\n        }, (error: HttpErrorResponse) => {\n          this.error.emit(error);\n        });\n    }\n  }\n\n}\n\n/**\n * @ignore\n * @deprecated from v5, renamed `SrcDirective` to {@link SourceDirective}.\n */\nexport declare let SrcDirective: typeof SourceDirective;\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConverter } from './showdown-converter.provider';\n\n/**\n * A angular pipe to transform `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownPipe } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownPipe ];\n * })\n * export class AppModule {}\n * ```\n *\n * Transform markdown value to html.\n * ```html\n * <input type=\"text\" placeholder=\"Name\" [(ngModel)]=\"name\"/>\n * <div [innerHTML]=\"'**Hello '+(name || 'nobody')+'!**' | showdown\">\n * ```\n *\n * Transform markdown value to html with `options`.\n * ```typescript\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: `<div innerHTML=\"{{ text | showdown: options }}\"></div>`\n * })\n * export class SomeComponent {\n *   text: string = \"__Some Underline__\";\n *   options: Showdown.ShowdownOptions = { underline: true };\n *   // ...\n * }\n * ```\n */\n@Pipe({\n  name: 'showdown',\n  pure: false\n})\nexport class ShowdownPipe extends ShowdownConverter implements PipeTransform {\n\n  /**\n   * Transform markdown value to html.\n   *\n   * @param value - The markdown value to transform to html.\n   * @param options - A `Showdown` converter options.\n   * @returns Returns the transform result of `value` to html.\n   */\n  transform(value: string, options?: Showdown.ShowdownOptions): string {\n    this.setOptions(options);\n    return this.makeHtml(value);\n  }\n\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\nimport { ShowdownConverter } from './showdown-converter.provider';\nimport { ShowdownComponent } from './showdown.component';\nimport { ShowdownPipe } from './showdown.pipe';\nimport { SourceDirective } from './source.directive';\n\n/**\n * @internal\n */\nconst DECLARATIONS = [\n  ShowdownComponent,\n  ShowdownPipe,\n  SourceDirective\n];\n\n/**\n * ### Example\n *\n * Add `ShowdownModule` to app `imports`.\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownModule } from 'ngx-showdown';\n *\n * @NgModule({\n *   imports: [ ShowdownModule ];\n * })\n * export class AppModule {}\n * ```\n */\n@NgModule({\n  declarations: DECLARATIONS,\n  providers: [ShowdownConverter],\n  exports: DECLARATIONS\n})\nexport class ShowdownModule {\n\n  /**\n   * __Example :__\n   *\n   * Add `ShowdownModule` to app `imports` with config.\n   * ```typescript\n   * import { NgModule } from '@angular/core';\n   * import { ShowdownModule } from 'ngx-showdown';\n   *\n   * @NgModule({\n   *   imports: [ ShowdownModule.forRoot({\n   *     smartIndentationFix: true,\n   *     foo: 'bar',\n   *     flavor: 'github',\n   *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]\n   *   }) ];\n   * })\n   * export class AppModule {}\n   * ```\n   * @param config - A root converter config for all converter instances.\n   */\n  static forRoot(config: ShowdownConfig | Showdown.ConverterOptions): ModuleWithProviders<ShowdownModule> {\n    return {\n      ngModule: ShowdownModule,\n      providers: [{provide: ShowdownConfig, useValue: config}]\n    };\n  }\n\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}