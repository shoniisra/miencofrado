import { __decorate, __param } from 'tslib';
import { Optional, Injectable, SecurityContext, ElementRef, Input, Component, EventEmitter, Output, Directive, Pipe, NgModule } from '@angular/core';
import { Converter } from 'showdown';
import { DomSanitizer } from '@angular/platform-browser';
import { HttpClient } from '@angular/common/http';

/**
 * @internal
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
import * as ɵngcc2 from '@angular/common/http';

const _c0 = ["*"];
let { hasOwnProperty } = {};
/**
 * A config provider
 *
 * ### Example
 *
 * Set custom config provider.
 * ```typescript
 * import { NgModel } from '@angular/core';
 * import { ShowdownModule, ShowdownConfig } from 'ngx-showdown';
 *
 * export class MyShowdownConfig extends ShowdownConfig {
 *   emoji = true;
 *   underscore = false;
 *   flavor = 'github';
 * }
 *
 * @NgModel({
 *   imports: [ ShowdownModule ],
 *   providers: [ {provide: ShowdownConfig, useClass: MyConverterOptions} ]
 * })
 * export class AppModule {}
 * ```
 */
class ShowdownConfig {
    constructor(options) {
        this.merge(options);
    }
    /**
     * Merge options
     *
     * @param options - A options object to merge.
     */
    merge(options) {
        for (let key in options) {
            if (hasOwnProperty.call(options, key)) {
                this[key] = options[key];
            }
        }
    }
}

/**
 * @internal
 */
let { hasOwnProperty: hasOwnProperty$1 } = {};
/**
 * ### Example
 *
 * Setup as standalone
 * ```typescript
 * import { NgModule } from '@angular/core';
 * import { ShowdownConverter } from 'ngx-showdown';
 *
 * @NgModule({
 *   providers: [ ShowdownConverter ];
 * })
 * export class AppModule {}
 * ```
 *
 * Use the converter instance.
 * ```typescript
 * import { Injectable } from '@angular/core';
 * import { ShowdownConverter } from 'ngx-showdown';
 *
 * @Injectable()
 * export class SomeService {
 *   constructor(showdownConverter: ShowdownConverter) {
 *     let markdown: string = "**Some**";
 *     let html: string = showdownConverter.makeHtml(markdown);
 *     console.log(`some:\nmarkdown: ${markdown)\nhtml: ${html}\n`);
 *   }
 * }
 * ```
 */
let ShowdownConverter = class ShowdownConverter extends Converter {
    constructor(config) {
        super(config && { extensions: config.extensions });
        this.setFlavor((config && config.flavor) || 'vanilla');
        this.setOptions(config);
    }
    /**
     * Set options to the converter.
     *
     * @param options - A options object to set.
     */
    setOptions(options) {
        for (let key in options) {
            if (hasOwnProperty$1.call(options, key)) {
                this.setOption(key, options[key]);
            }
        }
    }
};
ShowdownConverter.ɵfac = function ShowdownConverter_Factory(t) { return new (t || ShowdownConverter)(ɵngcc0.ɵɵinject(ShowdownConfig, 8)); };
ShowdownConverter.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ShowdownConverter, factory: function (t) { return ShowdownConverter.ɵfac(t); } });
ShowdownConverter.ctorParameters = () => [
    { type: ShowdownConfig, decorators: [{ type: Optional }] }
];
ShowdownConverter = __decorate([ __param(0, Optional())
], ShowdownConverter);

/**
 * @internal
 */
const MAP_OPTION = {
    '': true,
    true: true,
    false: false
};
/**
 * @internal
 */
let _toOption = (value) => MAP_OPTION.hasOwnProperty(value) ? MAP_OPTION[value] : value;
const ɵ0 = _toOption;
/**
 * The options keys for the dynamic properties set.
 * @internal
 */
const OPTIONS_PROPERTIES_KEYS = [
    'backslashEscapesHTMLTags',
    'completeHTMLDocument',
    'disableForced4SpacesIndentedSublists',
    'emoji',
    'encodeEmails',
    'ghCodeBlocks',
    'ghCompatibleHeaderId',
    'ghMentions',
    'ghMentionsLink',
    'headerLevelStart',
    'literalMidWordAsterisks',
    'literalMidWordUnderscores',
    'metadata',
    'noHeaderId',
    'omitExtraWLInCodeBlocks',
    'openLinksInNewWindow',
    'parseImgDimensions',
    'prefixHeaderId',
    'rawHeaderId',
    'rawPrefixHeaderId',
    'requireSpaceBeforeHeadingText',
    'simpleLineBreaks',
    'simplifiedAutoLink',
    'smartIndentationFix',
    'smoothLivePreview',
    'splitAdjacentBlockquotes',
    'strikethrough',
    'tables',
    'tablesHeaderId',
    'tasklists',
    'underline'
];
/**
 * A angular component for render `Markdown` to `HTML`.
 *
 * ### Example
 *
 * Setup as standalone
 * ```typescript
 * import { NgModule } from '@angular/core';
 * import { ShowdownComponent } from 'ngx-showdown';
 *
 * @NgModule({
 *   declarations: [ ShowdownComponent ];
 * })
 * export class AppModule {}
 * ```
 *
 * Bind markdown value and options object
 * ```typescript
 * import { Component } from '@angular/core';
 * import * as Showdown from 'showdown';
 *
 * @Component({
 *   selector: 'some',
 *   template: '<showdown [value]="text" [options]="options"></showdown>'
 * })
 * export class SomeComponent {
 *   text: string = `
 *     # Some header
 *     ---
 *     **Some bold**
 *   `;
 *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };
 *   // ...
 * }
 * ```
 * Bind single option (it have properties for all showdown options).
 * ```html
 * <showdown emoji="true"  noHeaderId># Some text :+1:</showdown>
 * ```
 *
 * Set static markdown value.
 * ```html
 * <showdown value="___Some static value___" underline></showdown>
 * ```
 *
 * Use as directive on anther element.
 * ```html
 * <div showdown="# Div Element" headerLevelStart="2"></div>
 * ```
 *
 * Static markdown value in the element content.
 * ```html
 * <div>
 *    <showdown smartIndentationFix>
 *       # List:
 *       * a
 *            * A
 *       * b
 *    </showdown>
 * </div>
 * ```
 *
 * Set template reference variable.
 * ```html
 * <showdown #sd></showdown>
 * ```
 * Or
 * ```html
 * <div showdown #sd="showdown"></div>
 * ```
 */
let ShowdownComponent = class ShowdownComponent extends ShowdownConverter {
    constructor(_elementRef, _domSanitizer, config) {
        super(config);
        this._elementRef = _elementRef;
        this._domSanitizer = _domSanitizer;
    }
    /**
     * Input alias to `value`.
     *
     * __Example :__
     *
     * ```html
     * <div [showdown]="# Some Header"></div>
     * ```
     *
     * Equivalent to
     * ```html
     * <showdown [value]="# Some Header"></showdown>
     * ```
     */
    set showdown(value) {
        this.value = value;
    }
    /**
     * The showdown options of the converter.
     *
     * __Example :__
     *
     * Bind options
     * ```typescript
     * import { Component } from '@angular/core';
     * import * as Showdown from 'showdown';
     *
     * @Component({
     *   selector: `some`,
     *   template: `<showdown [options]="options"># Some Header<showdown>`
     * })
     * export class SomeComponent {
     *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};
     *   // ...
     * }
     * ```
     * Or
     * ```html
     * <showdown [options]="{smartIndentationFix: true}"> # Indentation Fix<showdown>
     * ```
     */
    get options() {
        return this.getOptions();
    }
    set options(options) {
        this.setOptions(options);
    }
    /**
     * Enables html sanitize, it will sanitize the converter html output by [`DomSanitizer`](https://angular.io/api/platform-browser/DomSanitizer#sanitize).
     *
     * __Example :__
     *
     * ```typescript
     * import { Component } from '@angular/core';
     *
     * @Component({
     *   selector: 'some',
     *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],
     *   template: `
     *     <h3>Input</h3>
     *     <textarea class="box" [(ngModel)]="text"></textarea>
     *     <input type="checkbox" [(ngModel)]="sanitize"/> <b>Sanitize</b>
     *     <h3>Markdown</h3>
     *     <pre class="box"><code>{{ text }}</code></pre>
     *     <h3>Preview</h3>
     *     <div class="box">
     *       <showdown #sd [value]="text" [sanitize]="sanitize"></showdown>
     *     </div>
     *   `;
     * })
     * export class SomeComponent {
     *    text: string = `# A cool link
     * <a href="javascript:alert('Hello!')">click me</a>`;
     * }
     * ```
     */
    set sanitize(sanitize) {
        this._sanitize = _toOption(sanitize);
    }
    /**
     * A angular lifecycle method, Use on init to check if it `content` type and load the element `content` to `value`.
     * @internal
     */
    ngOnInit() {
        if (this.value === undefined && this._elementRef.nativeElement.innerHTML.trim() !== '') {
            this.render(this._elementRef.nativeElement.innerHTML);
        }
    }
    /**
     * A angular lifecycle method, Use to call to render method after changes.
     * @internal
     */
    ngOnChanges() {
        this.render();
    }
    /**
     * Convert the markdown value of {@link ShowdownComponent#value} to html and set the html result to the element content.
     *
     * __Example :__
     *
     * ```html
     * <textarea #textarea (change)="showdown.render(textarea.value)"/># Some Header</textarea>
     * <showdown #showdown></showdown>
     * ```
     * @param value - A markdown value to render (it will override the current value of `ShowdownComponent#value`)
     */
    render(value) {
        if (typeof value === 'string') {
            this.value = value;
        }
        if (typeof this.value === 'string') {
            let result = this.makeHtml(this.value);
            if (this._sanitize) {
                result = this._domSanitizer.sanitize(SecurityContext.HTML, result);
            }
            this._elementRef.nativeElement.innerHTML = result;
        }
    }
};
ShowdownComponent.ɵfac = function ShowdownComponent_Factory(t) { return new (t || ShowdownComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer, 8), ɵngcc0.ɵɵdirectiveInject(ShowdownConfig, 8)); };
ShowdownComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ShowdownComponent, selectors: [["showdown"], ["", "showdown", ""]], inputs: { backslashEscapesHTMLTags: "backslashEscapesHTMLTags", completeHTMLDocument: "completeHTMLDocument", disableForced4SpacesIndentedSublists: "disableForced4SpacesIndentedSublists", emoji: "emoji", encodeEmails: "encodeEmails", ghCodeBlocks: "ghCodeBlocks", ghCompatibleHeaderId: "ghCompatibleHeaderId", ghMentions: "ghMentions", ghMentionsLink: "ghMentionsLink", headerLevelStart: "headerLevelStart", literalMidWordAsterisks: "literalMidWordAsterisks", literalMidWordUnderscores: "literalMidWordUnderscores", metadata: "metadata", noHeaderId: "noHeaderId", omitExtraWLInCodeBlocks: "omitExtraWLInCodeBlocks", openLinksInNewWindow: "openLinksInNewWindow", parseImgDimensions: "parseImgDimensions", prefixHeaderId: "prefixHeaderId", rawHeaderId: "rawHeaderId", rawPrefixHeaderId: "rawPrefixHeaderId", requireSpaceBeforeHeadingText: "requireSpaceBeforeHeadingText", simpleLineBreaks: "simpleLineBreaks", simplifiedAutoLink: "simplifiedAutoLink", smartIndentationFix: "smartIndentationFix", smoothLivePreview: "smoothLivePreview", splitAdjacentBlockquotes: "splitAdjacentBlockquotes", strikethrough: "strikethrough", tables: "tables", tablesHeaderId: "tablesHeaderId", tasklists: "tasklists", underline: "underline", showdown: "showdown", value: "value", options: "options", sanitize: "sanitize" }, exportAs: ["showdown"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ShowdownComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ShowdownComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: DomSanitizer, decorators: [{ type: Optional }] },
    { type: ShowdownConfig, decorators: [{ type: Optional }] }
];
__decorate([
    Input()
], ShowdownComponent.prototype, "value", void 0);
__decorate([
    Input()
], ShowdownComponent.prototype, "showdown", null);
__decorate([
    Input()
], ShowdownComponent.prototype, "options", null);
__decorate([
    Input()
], ShowdownComponent.prototype, "sanitize", null);
ShowdownComponent = __decorate([ __param(1, Optional()), __param(2, Optional())
], ShowdownComponent);
// Define options properties setter for angular directive and direct access
for (let key of OPTIONS_PROPERTIES_KEYS) {
    Object.defineProperty(ShowdownComponent.prototype, key, {
        set(value) {
            this.setOption(key, _toOption(value));
        },
        configurable: true
    });
}

/**
 * A angular directive to `ShowdownComponent` for make http request of markdown content.
 *
 * ### Example
 *
 * Setup as standalone
 * ```typescript
 * import { NgModule } from '@angular/core';
 * import { HttpClientModule } from '@angular/common/http';
 * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';
 *
 * @NgModule({
 *    declarations: [ ShowdownComponent, SourceDirective ],
 *    imports: [ HttpClientModule ]
 * })
 * export class AppModule {}
 * ```
 *
 * Bind url `src` directive
 * ```typescript
 * import { Component } from '@angular/core';
 *
 * @Component({
 *     selector: 'some',
 *     template: '<showdown [src]="url" smartIndentationFix>**Loading...**</showdown>
 * })
 * class SomeComponent {
 *     url: string = 'https://unpkg.com/ngx-showdown/README.md';
 *     // ...
 * }
 * ```
 *
 * Set static url
 * ```html
 * <showdown src="README.md" [options]="{noHeaderId: true}"></showdown>
 * ```
 *
 * Set template reference variable
 * ```html
 * <showdown #source="source" src="README.md"></showdown>
 * ```
 *
 * Listening to `error` events.
 * ```html
 * <showdown #sd src="http://url.error" (error)="sd.render('# '+$event.message)"></showdown>
 * ```
 */
let SourceDirective = class SourceDirective {
    constructor(_showdownComponent, _http) {
        this._showdownComponent = _showdownComponent;
        this._http = _http;
        /**
         * On error occur.
         *
         * __Example :__
         *
         * ```html
         * <input type="text" placeholder="url" [(ngModel)]="url"/>
         * <showdown [src]="url" (error)="sd.render('# Error\n> '+$event.message)">**Loading...**</showdown>
         * ```
         */
        this.error = new EventEmitter();
    }
    /**
     * A angular lifecycle method, Use to call to `load` method on src init/changes
     * @internal
     */
    ngOnChanges() {
        this.load();
    }
    /**
     * Load the markdown content of {@link SourceDirective#src} url to {@link ShowdownComponent#value}.
     *
     * __Example :__
     *
     * ```html
     * <input type="text" #url value="source.src" placeholder="Url" />
     * <button (click)="source.load(url.value)">Load</button>
     * <showdown #source="source" src="https://unpkg.com/ngx-showdown/README.md"></showdown>
     * ```
     * @param url - A url of markdown content to load (it will override the current url of `SourceDirective#src`)
     */
    load(url) {
        if (url) {
            this.src = url;
        }
        if (this.src) {
            this
                ._http
                .get(this.src, { responseType: 'text' })
                .subscribe((response) => {
                this._showdownComponent.render(response);
            }, (error) => {
                this.error.emit(error);
            });
        }
    }
};
SourceDirective.ɵfac = function SourceDirective_Factory(t) { return new (t || SourceDirective)(ɵngcc0.ɵɵdirectiveInject(ShowdownComponent), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.HttpClient)); };
SourceDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SourceDirective, selectors: [["showdown", "src", ""], ["", "showdown", "", "src", ""]], inputs: { src: "src" }, outputs: { error: "error" }, exportAs: ["source"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });
SourceDirective.ctorParameters = () => [
    { type: ShowdownComponent },
    { type: HttpClient }
];
__decorate([
    Input()
], SourceDirective.prototype, "src", void 0);
__decorate([
    Output()
], SourceDirective.prototype, "error", void 0);

/**
 * A angular pipe to transform `Markdown` to `HTML`.
 *
 * ### Example
 *
 * Setup as standalone
 * ```typescript
 * import { NgModule } from '@angular/core';
 * import { ShowdownPipe } from 'ngx-showdown';
 *
 * @NgModule({
 *   declarations: [ ShowdownPipe ];
 * })
 * export class AppModule {}
 * ```
 *
 * Transform markdown value to html.
 * ```html
 * <input type="text" placeholder="Name" [(ngModel)]="name"/>
 * <div [innerHTML]="'**Hello '+(name || 'nobody')+'!**' | showdown">
 * ```
 *
 * Transform markdown value to html with `options`.
 * ```typescript
 * import * as Showdown from 'showdown';
 *
 * @Component({
 *   selector: 'some',
 *   template: `<div innerHTML="{{ text | showdown: options }}"></div>`
 * })
 * export class SomeComponent {
 *   text: string = "__Some Underline__";
 *   options: Showdown.ShowdownOptions = { underline: true };
 *   // ...
 * }
 * ```
 */
let ShowdownPipe = class ShowdownPipe extends ShowdownConverter {
    /**
     * Transform markdown value to html.
     *
     * @param value - The markdown value to transform to html.
     * @param options - A `Showdown` converter options.
     * @returns Returns the transform result of `value` to html.
     */
    transform(value, options) {
        this.setOptions(options);
        return this.makeHtml(value);
    }
};
ShowdownPipe.ɵfac = function ShowdownPipe_Factory(t) { return ɵShowdownPipe_BaseFactory(t || ShowdownPipe); };
ShowdownPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "showdown", type: ShowdownPipe, pure: false });

var ShowdownModule_1;
/**
 * @internal
 */
const DECLARATIONS = [
    ShowdownComponent,
    ShowdownPipe,
    SourceDirective
];
/**
 * ### Example
 *
 * Add `ShowdownModule` to app `imports`.
 * ```typescript
 * import { NgModule } from '@angular/core';
 * import { ShowdownModule } from 'ngx-showdown';
 *
 * @NgModule({
 *   imports: [ ShowdownModule ];
 * })
 * export class AppModule {}
 * ```
 */
let ShowdownModule = ShowdownModule_1 = class ShowdownModule {
    /**
     * __Example :__
     *
     * Add `ShowdownModule` to app `imports` with config.
     * ```typescript
     * import { NgModule } from '@angular/core';
     * import { ShowdownModule } from 'ngx-showdown';
     *
     * @NgModule({
     *   imports: [ ShowdownModule.forRoot({
     *     smartIndentationFix: true,
     *     foo: 'bar',
     *     flavor: 'github',
     *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]
     *   }) ];
     * })
     * export class AppModule {}
     * ```
     * @param config - A root converter config for all converter instances.
     */
    static forRoot(config) {
        return {
            ngModule: ShowdownModule_1,
            providers: [{ provide: ShowdownConfig, useValue: config }]
        };
    }
};
ShowdownModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ShowdownModule });
ShowdownModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ShowdownModule_Factory(t) { return new (t || ShowdownModule)(); }, providers: [ShowdownConverter] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShowdownConverter, [{
        type: Injectable
    }], function () { return [{ type: ShowdownConfig, decorators: [{
                type: Optional
            }] }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShowdownComponent, [{
        type: Component,
        args: [{
                selector: 'showdown,[showdown]',
                template: '<ng-content></ng-content>',
                exportAs: 'showdown',
                inputs: OPTIONS_PROPERTIES_KEYS
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.DomSanitizer, decorators: [{
                type: Optional
            }] }, { type: ShowdownConfig, decorators: [{
                type: Optional
            }] }]; }, { showdown: [{
            type: Input
        }], value: [{
            type: Input
        }], options: [{
            type: Input
        }], sanitize: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SourceDirective, [{
        type: Directive,
        args: [{
                selector: 'showdown[src],[showdown][src]',
                exportAs: 'source'
            }]
    }], function () { return [{ type: ShowdownComponent }, { type: ɵngcc2.HttpClient }]; }, { error: [{
            type: Output
        }], src: [{
            type: Input
        }] }); })();
const ɵShowdownPipe_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(ShowdownPipe);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShowdownPipe, [{
        type: Pipe,
        args: [{
                name: 'showdown',
                pure: false
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ShowdownModule, { declarations: [ShowdownComponent, ShowdownPipe, SourceDirective], exports: [ShowdownComponent, ShowdownPipe, SourceDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShowdownModule, [{
        type: NgModule,
        args: [{
                declarations: DECLARATIONS,
                providers: [ShowdownConverter],
                exports: DECLARATIONS
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ShowdownComponent, ShowdownConfig, ShowdownConverter, ShowdownModule, ShowdownPipe, SourceDirective, ɵ0 };

//# sourceMappingURL=ngx-showdown.js.map