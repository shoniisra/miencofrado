{"version":3,"file":"source.directive.d.ts","sources":["source.directive.d.ts"],"names":[],"mappingssourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { EventEmitter, OnChanges } from '@angular/core';\nimport { ShowdownComponent } from './showdown.component';\n/**\n * A angular directive to `ShowdownComponent` for make http request of markdown content.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { HttpClientModule } from '@angular/common/http';\n * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';\n *\n * @NgModule({\n *    declarations: [ ShowdownComponent, SourceDirective ],\n *    imports: [ HttpClientModule ]\n * })\n * export class AppModule {}\n * ```\n *\n * Bind url `src` directive\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *     selector: 'some',\n *     template: '<showdown [src]=\"url\" smartIndentationFix>**Loading...**</showdown>\n * })\n * class SomeComponent {\n *     url: string = 'https://unpkg.com/ngx-showdown/README.md';\n *     // ...\n * }\n * ```\n *\n * Set static url\n * ```html\n * <showdown src=\"README.md\" [options]=\"{noHeaderId: true}\"></showdown>\n * ```\n *\n * Set template reference variable\n * ```html\n * <showdown #source=\"source\" src=\"README.md\"></showdown>\n * ```\n *\n * Listening to `error` events.\n * ```html\n * <showdown #sd src=\"http://url.error\" (error)=\"sd.render('# '+$event.message)\"></showdown>\n * ```\n */\nexport declare class SourceDirective implements OnChanges {\n    private _showdownComponent;\n    private _http;\n    /**\n     * The source url of the markdown content.\n     *\n     * __Example :__\n     *\n     * Set static url to `src` directive.\n     * ```html\n     * <showdown src=\"https://unpkg.com/ngx-showdown/README.md\"></showdown>\n     * ```\n     *\n     * Bind url to `src` directive.\n     * ```html\n     * <input type=\"text\" #url placeholder=\"url\" />\n     * <button (click)=\"src = url.value\">Load</button>\n     * <showdown [src]=\"src\">**Loading...**</showdown>\n     * ```\n     */\n    src: string;\n    /**\n     * On error occur.\n     *\n     * __Example :__\n     *\n     * ```html\n     * <input type=\"text\" placeholder=\"url\" [(ngModel)]=\"url\"/>\n     * <showdown [src]=\"url\" (error)=\"sd.render('# Error\\n> '+$event.message)\">**Loading...**</showdown>\n     * ```\n     */\n    error: EventEmitter<HttpErrorResponse>;\n    constructor(_showdownComponent: ShowdownComponent, _http: HttpClient);\n    /**\n     * A angular lifecycle method, Use to call to `load` method on src init/changes\n     * @internal\n     */\n    ngOnChanges(): void;\n    /**\n     * Load the markdown content of {@link SourceDirective#src} url to {@link ShowdownComponent#value}.\n     *\n     * __Example :__\n     *\n     * ```html\n     * <input type=\"text\" #url value=\"source.src\" placeholder=\"Url\" />\n     * <button (click)=\"source.load(url.value)\">Load</button>\n     * <showdown #source=\"source\" src=\"https://unpkg.com/ngx-showdown/README.md\"></showdown>\n     * ```\n     * @param url - A url of markdown content to load (it will override the current url of `SourceDirective#src`)\n     */\n    load(url?: string): void;\n}\n/**\n * @ignore\n * @deprecated from v5, renamed `SrcDirective` to {@link SourceDirective}.\n */\nexport declare let SrcDirective: typeof SourceDirective;\n"]}