import { __decorate, __extends, __param } from "tslib";
import { Injectable, Optional } from '@angular/core';
import * as Showdown from 'showdown';
import { ShowdownConfig } from './showdown-config.provider';
/**
 * @internal
 */
var hasOwnProperty = {}.hasOwnProperty;
/**
 * ### Example
 *
 * Setup as standalone
 * ```typescript
 * import { NgModule } from '@angular/core';
 * import { ShowdownConverter } from 'ngx-showdown';
 *
 * @NgModule({
 *   providers: [ ShowdownConverter ];
 * })
 * export class AppModule {}
 * ```
 *
 * Use the converter instance.
 * ```typescript
 * import { Injectable } from '@angular/core';
 * import { ShowdownConverter } from 'ngx-showdown';
 *
 * @Injectable()
 * export class SomeService {
 *   constructor(showdownConverter: ShowdownConverter) {
 *     let markdown: string = "**Some**";
 *     let html: string = showdownConverter.makeHtml(markdown);
 *     console.log(`some:\nmarkdown: ${markdown)\nhtml: ${html}\n`);
 *   }
 * }
 * ```
 */
var ShowdownConverter = /** @class */ (function (_super) {
    __extends(ShowdownConverter, _super);
    function ShowdownConverter(config) {
        var _this = _super.call(this, config && { extensions: config.extensions }) || this;
        _this.setFlavor((config && config.flavor) || 'vanilla');
        _this.setOptions(config);
        return _this;
    }
    /**
     * Set options to the converter.
     *
     * @param options - A options object to set.
     */
    ShowdownConverter.prototype.setOptions = function (options) {
        for (var key in options) {
            if (hasOwnProperty.call(options, key)) {
                this.setOption(key, options[key]);
            }
        }
    };
    ShowdownConverter.ctorParameters = function () { return [
        { type: ShowdownConfig, decorators: [{ type: Optional }] }
    ]; };
    ShowdownConverter = __decorate([
        Injectable(),
        __param(0, Optional())
    ], ShowdownConverter);
    return ShowdownConverter;
}(Showdown.Converter));
export { ShowdownConverter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvd2Rvd24tY29udmVydGVyLnByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXNob3dkb3duLyIsInNvdXJjZXMiOlsic2hvd2Rvd24tY29udmVydGVyLnByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEtBQUssUUFBUSxNQUFNLFVBQVUsQ0FBQztBQUNyQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFNUQ7O0dBRUc7QUFDRSxJQUFBLGtDQUFjLENBQU87QUFFMUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E0Qkc7QUFFSDtJQUF1QyxxQ0FBa0I7SUFFdkQsMkJBQXdCLE1BQXVCO1FBQS9DLFlBQ0Usa0JBQU0sTUFBTSxJQUFJLEVBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxVQUFVLEVBQUMsQ0FBQyxTQUdqRDtRQUZDLEtBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZELEtBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQzFCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksc0NBQVUsR0FBakIsVUFBa0IsT0FBaUM7UUFDakQsS0FBSyxJQUFJLEdBQUcsSUFBSSxPQUFPLEVBQUU7WUFDdkIsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFBRTtnQkFDckMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDbkM7U0FDRjtJQUNILENBQUM7O2dCQWpCZ0MsY0FBYyx1QkFBbEMsUUFBUTs7SUFGVixpQkFBaUI7UUFEN0IsVUFBVSxFQUFFO1FBR0UsV0FBQSxRQUFRLEVBQUUsQ0FBQTtPQUZaLGlCQUFpQixDQXFCN0I7SUFBRCx3QkFBQztDQUFBLEFBckJELENBQXVDLFFBQVEsQ0FBQyxTQUFTLEdBcUJ4RDtTQXJCWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgU2hvd2Rvd24gZnJvbSAnc2hvd2Rvd24nO1xuaW1wb3J0IHsgU2hvd2Rvd25Db25maWcgfSBmcm9tICcuL3Nob3dkb3duLWNvbmZpZy5wcm92aWRlcic7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmxldCB7aGFzT3duUHJvcGVydHl9ID0ge307XG5cbi8qKlxuICogIyMjIEV4YW1wbGVcbiAqXG4gKiBTZXR1cCBhcyBzdGFuZGFsb25lXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuICogaW1wb3J0IHsgU2hvd2Rvd25Db252ZXJ0ZXIgfSBmcm9tICduZ3gtc2hvd2Rvd24nO1xuICpcbiAqIEBOZ01vZHVsZSh7XG4gKiAgIHByb3ZpZGVyczogWyBTaG93ZG93bkNvbnZlcnRlciBdO1xuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBBcHBNb2R1bGUge31cbiAqIGBgYFxuICpcbiAqIFVzZSB0aGUgY29udmVydGVyIGluc3RhbmNlLlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuICogaW1wb3J0IHsgU2hvd2Rvd25Db252ZXJ0ZXIgfSBmcm9tICduZ3gtc2hvd2Rvd24nO1xuICpcbiAqIEBJbmplY3RhYmxlKClcbiAqIGV4cG9ydCBjbGFzcyBTb21lU2VydmljZSB7XG4gKiAgIGNvbnN0cnVjdG9yKHNob3dkb3duQ29udmVydGVyOiBTaG93ZG93bkNvbnZlcnRlcikge1xuICogICAgIGxldCBtYXJrZG93bjogc3RyaW5nID0gXCIqKlNvbWUqKlwiO1xuICogICAgIGxldCBodG1sOiBzdHJpbmcgPSBzaG93ZG93bkNvbnZlcnRlci5tYWtlSHRtbChtYXJrZG93bik7XG4gKiAgICAgY29uc29sZS5sb2coYHNvbWU6XFxubWFya2Rvd246ICR7bWFya2Rvd24pXFxuaHRtbDogJHtodG1sfVxcbmApO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNob3dkb3duQ29udmVydGVyIGV4dGVuZHMgU2hvd2Rvd24uQ29udmVydGVyIHtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBjb25maWc/OiBTaG93ZG93bkNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyAmJiB7ZXh0ZW5zaW9uczogY29uZmlnLmV4dGVuc2lvbnN9KTtcbiAgICB0aGlzLnNldEZsYXZvcigoY29uZmlnICYmIGNvbmZpZy5mbGF2b3IpIHx8ICd2YW5pbGxhJyk7XG4gICAgdGhpcy5zZXRPcHRpb25zKGNvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IG9wdGlvbnMgdG8gdGhlIGNvbnZlcnRlci5cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBBIG9wdGlvbnMgb2JqZWN0IHRvIHNldC5cbiAgICovXG4gIHB1YmxpYyBzZXRPcHRpb25zKG9wdGlvbnM6IFNob3dkb3duLlNob3dkb3duT3B0aW9ucyk6IHZvaWQge1xuICAgIGZvciAobGV0IGtleSBpbiBvcHRpb25zKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCBrZXkpKSB7XG4gICAgICAgIHRoaXMuc2V0T3B0aW9uKGtleSwgb3B0aW9uc1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqIEBkZXByZWNhdGVkIGZyb20gdjUsIHVzZSB7QGxpbmsgU2hvd2Rvd24uQ29udmVydGVyT3B0aW9uc30gaW5zdGVhZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQ29udmVydGVyT3B0aW9ucyBleHRlbmRzIFNob3dkb3duLkNvbnZlcnRlck9wdGlvbnMge1xufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqIEBkZXByZWNhdGVkIGZyb20gdjUsIHVzZSB7QGxpbmsgU2hvd2Rvd24uU2hvd2Rvd25PcHRpb25zfSBpbnN0ZWFkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElDb252ZXJ0ZXJPcHRpb25zQ2hhbmdlYWJsZSBleHRlbmRzIFNob3dkb3duLlNob3dkb3duT3B0aW9ucyB7XG59XG4iXX0=