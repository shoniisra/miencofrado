var e_1, _a;
import { __decorate, __extends, __param, __values } from "tslib";
import { Component, ElementRef, Input, OnChanges, OnInit, Optional, SecurityContext } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { ShowdownConfig } from './showdown-config.provider';
import { ShowdownConverter } from './showdown-converter.provider';
/**
 * @internal
 */
var MAP_OPTION = {
    '': true,
    true: true,
    false: false
};
/**
 * @internal
 */
var _toOption = function (value) { return MAP_OPTION.hasOwnProperty(value) ? MAP_OPTION[value] : value; };
var ɵ0 = _toOption;
/**
 * The options keys for the dynamic properties set.
 * @internal
 */
var OPTIONS_PROPERTIES_KEYS = [
    'backslashEscapesHTMLTags',
    'completeHTMLDocument',
    'disableForced4SpacesIndentedSublists',
    'emoji',
    'encodeEmails',
    'ghCodeBlocks',
    'ghCompatibleHeaderId',
    'ghMentions',
    'ghMentionsLink',
    'headerLevelStart',
    'literalMidWordAsterisks',
    'literalMidWordUnderscores',
    'metadata',
    'noHeaderId',
    'omitExtraWLInCodeBlocks',
    'openLinksInNewWindow',
    'parseImgDimensions',
    'prefixHeaderId',
    'rawHeaderId',
    'rawPrefixHeaderId',
    'requireSpaceBeforeHeadingText',
    'simpleLineBreaks',
    'simplifiedAutoLink',
    'smartIndentationFix',
    'smoothLivePreview',
    'splitAdjacentBlockquotes',
    'strikethrough',
    'tables',
    'tablesHeaderId',
    'tasklists',
    'underline'
];
/**
 * A angular component for render `Markdown` to `HTML`.
 *
 * ### Example
 *
 * Setup as standalone
 * ```typescript
 * import { NgModule } from '@angular/core';
 * import { ShowdownComponent } from 'ngx-showdown';
 *
 * @NgModule({
 *   declarations: [ ShowdownComponent ];
 * })
 * export class AppModule {}
 * ```
 *
 * Bind markdown value and options object
 * ```typescript
 * import { Component } from '@angular/core';
 * import * as Showdown from 'showdown';
 *
 * @Component({
 *   selector: 'some',
 *   template: '<showdown [value]="text" [options]="options"></showdown>'
 * })
 * export class SomeComponent {
 *   text: string = `
 *     # Some header
 *     ---
 *     **Some bold**
 *   `;
 *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };
 *   // ...
 * }
 * ```
 * Bind single option (it have properties for all showdown options).
 * ```html
 * <showdown emoji="true"  noHeaderId># Some text :+1:</showdown>
 * ```
 *
 * Set static markdown value.
 * ```html
 * <showdown value="___Some static value___" underline></showdown>
 * ```
 *
 * Use as directive on anther element.
 * ```html
 * <div showdown="# Div Element" headerLevelStart="2"></div>
 * ```
 *
 * Static markdown value in the element content.
 * ```html
 * <div>
 *    <showdown smartIndentationFix>
 *       # List:
 *       * a
 *            * A
 *       * b
 *    </showdown>
 * </div>
 * ```
 *
 * Set template reference variable.
 * ```html
 * <showdown #sd></showdown>
 * ```
 * Or
 * ```html
 * <div showdown #sd="showdown"></div>
 * ```
 */
var ShowdownComponent = /** @class */ (function (_super) {
    __extends(ShowdownComponent, _super);
    function ShowdownComponent(_elementRef, _domSanitizer, config) {
        var _this = _super.call(this, config) || this;
        _this._elementRef = _elementRef;
        _this._domSanitizer = _domSanitizer;
        return _this;
    }
    Object.defineProperty(ShowdownComponent.prototype, "showdown", {
        /**
         * Input alias to `value`.
         *
         * __Example :__
         *
         * ```html
         * <div [showdown]="# Some Header"></div>
         * ```
         *
         * Equivalent to
         * ```html
         * <showdown [value]="# Some Header"></showdown>
         * ```
         */
        set: function (value) {
            this.value = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShowdownComponent.prototype, "options", {
        /**
         * The showdown options of the converter.
         *
         * __Example :__
         *
         * Bind options
         * ```typescript
         * import { Component } from '@angular/core';
         * import * as Showdown from 'showdown';
         *
         * @Component({
         *   selector: `some`,
         *   template: `<showdown [options]="options"># Some Header<showdown>`
         * })
         * export class SomeComponent {
         *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};
         *   // ...
         * }
         * ```
         * Or
         * ```html
         * <showdown [options]="{smartIndentationFix: true}"> # Indentation Fix<showdown>
         * ```
         */
        get: function () {
            return this.getOptions();
        },
        set: function (options) {
            this.setOptions(options);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShowdownComponent.prototype, "sanitize", {
        /**
         * Enables html sanitize, it will sanitize the converter html output by [`DomSanitizer`](https://angular.io/api/platform-browser/DomSanitizer#sanitize).
         *
         * __Example :__
         *
         * ```typescript
         * import { Component } from '@angular/core';
         *
         * @Component({
         *   selector: 'some',
         *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],
         *   template: `
         *     <h3>Input</h3>
         *     <textarea class="box" [(ngModel)]="text"></textarea>
         *     <input type="checkbox" [(ngModel)]="sanitize"/> <b>Sanitize</b>
         *     <h3>Markdown</h3>
         *     <pre class="box"><code>{{ text }}</code></pre>
         *     <h3>Preview</h3>
         *     <div class="box">
         *       <showdown #sd [value]="text" [sanitize]="sanitize"></showdown>
         *     </div>
         *   `;
         * })
         * export class SomeComponent {
         *    text: string = `# A cool link
         * <a href="javascript:alert('Hello!')">click me</a>`;
         * }
         * ```
         */
        set: function (sanitize) {
            this._sanitize = _toOption(sanitize);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * A angular lifecycle method, Use on init to check if it `content` type and load the element `content` to `value`.
     * @internal
     */
    ShowdownComponent.prototype.ngOnInit = function () {
        if (this.value === undefined && this._elementRef.nativeElement.innerHTML.trim() !== '') {
            this.render(this._elementRef.nativeElement.innerHTML);
        }
    };
    /**
     * A angular lifecycle method, Use to call to render method after changes.
     * @internal
     */
    ShowdownComponent.prototype.ngOnChanges = function () {
        this.render();
    };
    /**
     * Convert the markdown value of {@link ShowdownComponent#value} to html and set the html result to the element content.
     *
     * __Example :__
     *
     * ```html
     * <textarea #textarea (change)="showdown.render(textarea.value)"/># Some Header</textarea>
     * <showdown #showdown></showdown>
     * ```
     * @param value - A markdown value to render (it will override the current value of `ShowdownComponent#value`)
     */
    ShowdownComponent.prototype.render = function (value) {
        if (typeof value === 'string') {
            this.value = value;
        }
        if (typeof this.value === 'string') {
            var result = this.makeHtml(this.value);
            if (this._sanitize) {
                result = this._domSanitizer.sanitize(SecurityContext.HTML, result);
            }
            this._elementRef.nativeElement.innerHTML = result;
        }
    };
    ShowdownComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DomSanitizer, decorators: [{ type: Optional }] },
        { type: ShowdownConfig, decorators: [{ type: Optional }] }
    ]; };
    __decorate([
        Input()
    ], ShowdownComponent.prototype, "value", void 0);
    __decorate([
        Input()
    ], ShowdownComponent.prototype, "showdown", null);
    __decorate([
        Input()
    ], ShowdownComponent.prototype, "options", null);
    __decorate([
        Input()
    ], ShowdownComponent.prototype, "sanitize", null);
    ShowdownComponent = __decorate([
        Component({
            selector: 'showdown,[showdown]',
            template: '<ng-content></ng-content>',
            exportAs: 'showdown',
            inputs: OPTIONS_PROPERTIES_KEYS
        }),
        __param(1, Optional()), __param(2, Optional())
    ], ShowdownComponent);
    return ShowdownComponent;
}(ShowdownConverter));
export { ShowdownComponent };
var _loop_1 = function (key) {
    Object.defineProperty(ShowdownComponent.prototype, key, {
        set: function (value) {
            this.setOption(key, _toOption(value));
        },
        configurable: true
    });
};
try {
    // Define options properties setter for angular directive and direct access
    for (var OPTIONS_PROPERTIES_KEYS_1 = __values(OPTIONS_PROPERTIES_KEYS), OPTIONS_PROPERTIES_KEYS_1_1 = OPTIONS_PROPERTIES_KEYS_1.next(); !OPTIONS_PROPERTIES_KEYS_1_1.done; OPTIONS_PROPERTIES_KEYS_1_1 = OPTIONS_PROPERTIES_KEYS_1.next()) {
        var key = OPTIONS_PROPERTIES_KEYS_1_1.value;
        _loop_1(key);
    }
}
catch (e_1_1) { e_1 = { error: e_1_1 }; }
finally {
    try {
        if (OPTIONS_PROPERTIES_KEYS_1_1 && !OPTIONS_PROPERTIES_KEYS_1_1.done && (_a = OPTIONS_PROPERTIES_KEYS_1.return)) _a.call(OPTIONS_PROPERTIES_KEYS_1);
    }
    finally { if (e_1) throw e_1.error; }
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,