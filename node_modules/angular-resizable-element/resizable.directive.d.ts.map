{"version":3,"file":"resizable.directive.d.ts","sources":["resizable.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Renderer2, ElementRef, OnInit, EventEmitter, OnDestroy, NgZone, OnChanges, SimpleChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Edges } from './interfaces/edges.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\nexport interface ResizeCursors {\n    topLeft: string;\n    topRight: string;\n    bottomLeft: string;\n    bottomRight: string;\n    leftOrRight: string;\n    topOrBottom: string;\n}\nexport declare const MOUSE_MOVE_THROTTLE_MS: number;\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * <div\n *   mwlResizable\n *   [resizeEdges]=\"{bottom: true, right: true, top: true, left: true}\"\n *   [enableGhostResize]=\"true\">\n * </div>\n * ```\n */\nexport declare class ResizableDirective implements OnInit, OnChanges, OnDestroy {\n    private platformId;\n    private renderer;\n    elm: ElementRef;\n    private zone;\n    /**\n     * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n     */\n    validateResize: (resizeEvent: ResizeEvent) => boolean;\n    /**\n     * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n     * @deprecated use a resize handle instead that positions itself to the side of the element you would like to resize\n     */\n    resizeEdges: Edges;\n    /**\n     * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n     */\n    enableGhostResize: boolean;\n    /**\n     * A snap grid that resize events will be locked to.\n     *\n     * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n     */\n    resizeSnapGrid: Edges;\n    /**\n     * The mouse cursors that will be set on the resize edges\n     */\n    resizeCursors: ResizeCursors;\n    /**\n     * Mouse over thickness to active cursor.\n     * @deprecated invalid when you migrate to use resize handles instead of setting resizeEdges on the element\n     */\n    resizeCursorPrecision: number;\n    /**\n     * Define the positioning of the ghost element (can be fixed or absolute)\n     */\n    ghostElementPositioning: 'fixed' | 'absolute';\n    /**\n     * Allow elements to be resized to negative dimensions\n     */\n    allowNegativeResizes: boolean;\n    /**\n     * The mouse move throttle in milliseconds, default: 50 ms\n     */\n    mouseMoveThrottleMS: number;\n    /**\n     * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n     */\n    resizeStart: EventEmitter<ResizeEvent>;\n    /**\n     * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n     */\n    resizing: EventEmitter<ResizeEvent>;\n    /**\n     * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n     */\n    resizeEnd: EventEmitter<ResizeEvent>;\n    /**\n     * @hidden\n     */\n    mouseup: Subject<{\n        clientX: number;\n        clientY: number;\n        edges?: Edges;\n    }>;\n    /**\n     * @hidden\n     */\n    mousedown: Subject<{\n        clientX: number;\n        clientY: number;\n        edges?: Edges;\n    }>;\n    /**\n     * @hidden\n     */\n    mousemove: Subject<{\n        clientX: number;\n        clientY: number;\n        edges?: Edges;\n        event: MouseEvent | TouchEvent;\n    }>;\n    private pointerEventListeners;\n    private destroy$;\n    private resizeEdges$;\n    /**\n     * @hidden\n     */\n    constructor(platformId: any, renderer: Renderer2, elm: ElementRef, zone: NgZone);\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    private setElementClass;\n}\n"]}