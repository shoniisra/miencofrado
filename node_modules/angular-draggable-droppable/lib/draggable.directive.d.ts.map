{"version":3,"file":"draggable.directive.d.ts","sources":["draggable.directive.d.ts"],"names":[],"mappingssourcesContent":["import { OnInit, ElementRef, Renderer2, EventEmitter, OnDestroy, OnChanges, NgZone, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subject, ReplaySubject } from 'rxjs';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nexport interface Coordinates {\n    x: number;\n    y: number;\n}\nexport interface DragAxis {\n    x: boolean;\n    y: boolean;\n}\nexport interface SnapGrid {\n    x?: number;\n    y?: number;\n}\nexport interface DragPointerDownEvent extends Coordinates {\n}\nexport interface DragStartEvent {\n    cancelDrag$: ReplaySubject<void>;\n}\nexport interface DragMoveEvent extends Coordinates {\n}\nexport interface DragEndEvent extends Coordinates {\n    dragCancelled: boolean;\n}\nexport interface ValidateDragParams extends Coordinates {\n    transform: {\n        x: number;\n        y: number;\n    };\n}\nexport declare type ValidateDrag = (params: ValidateDragParams) => boolean;\nexport interface PointerEvent {\n    clientX: number;\n    clientY: number;\n    event: MouseEvent | TouchEvent;\n}\nexport interface TimeLongPress {\n    timerBegin: number;\n    timerEnd: number;\n}\nexport interface GhostElementCreatedEvent {\n    clientX: number;\n    clientY: number;\n    element: HTMLElement;\n}\nexport declare class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n    private element;\n    private renderer;\n    private draggableHelper;\n    private zone;\n    private vcr;\n    private scrollContainer;\n    private document;\n    /**\n     * an object of data you can pass to the drop event\n     */\n    dropData: any;\n    /**\n     * The axis along which the element is draggable\n     */\n    dragAxis: DragAxis;\n    /**\n     * Snap all drags to an x / y grid\n     */\n    dragSnapGrid: SnapGrid;\n    /**\n     * Show a ghost element that shows the drag when dragging\n     */\n    ghostDragEnabled: boolean;\n    /**\n     * Show the original element when ghostDragEnabled is true\n     */\n    showOriginalElementWhileDragging: boolean;\n    /**\n     * Allow custom behaviour to control when the element is dragged\n     */\n    validateDrag: ValidateDrag;\n    /**\n     * The cursor to use when hovering over a draggable element\n     */\n    dragCursor: string;\n    /**\n     * The css class to apply when the element is being dragged\n     */\n    dragActiveClass: string;\n    /**\n     * The element the ghost element will be appended to. Default is next to the dragged element\n     */\n    ghostElementAppendTo: HTMLElement;\n    /**\n     * An ng-template to be inserted into the parent element of the ghost element. It will overwrite any child nodes.\n     */\n    ghostElementTemplate: TemplateRef<any>;\n    /**\n     * Amount of milliseconds to wait on touch devices before starting to drag the element (so that you can scroll the page by touching a draggable element)\n     */\n    touchStartLongPress: {\n        delay: number;\n        delta: number;\n    };\n    autoScroll: {\n        margin: number | {\n            top?: number;\n            left?: number;\n            right?: number;\n            bottom?: number;\n        };\n        maxSpeed?: number | {\n            top?: number;\n            left?: number;\n            right?: number;\n            bottom?: number;\n        };\n        scrollWhenOutside?: boolean;\n    };\n    /**\n     * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n     */\n    dragPointerDown: EventEmitter<DragPointerDownEvent>;\n    /**\n     * Called when the element has started to be dragged.\n     * Only called after at least one mouse or touch move event.\n     * If you call $event.cancelDrag$.emit() it will cancel the current drag\n     */\n    dragStart: EventEmitter<DragStartEvent>;\n    /**\n     * Called after the ghost element has been created\n     */\n    ghostElementCreated: EventEmitter<GhostElementCreatedEvent>;\n    /**\n     * Called when the element is being dragged\n     */\n    dragging: EventEmitter<DragMoveEvent>;\n    /**\n     * Called after the element is dragged\n     */\n    dragEnd: EventEmitter<DragEndEvent>;\n    /**\n     * @hidden\n     */\n    pointerDown$: Subject<PointerEvent>;\n    /**\n     * @hidden\n     */\n    pointerMove$: Subject<PointerEvent>;\n    /**\n     * @hidden\n     */\n    pointerUp$: Subject<PointerEvent>;\n    private eventListenerSubscriptions;\n    private ghostElement;\n    private destroy$;\n    private timeLongPress;\n    private scroller;\n    /**\n     * @hidden\n     */\n    constructor(element: ElementRef<HTMLElement>, renderer: Renderer2, draggableHelper: DraggableHelper, zone: NgZone, vcr: ViewContainerRef, scrollContainer: DraggableScrollContainerDirective, document: any);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    private checkEventListeners;\n    private onMouseDown;\n    private onMouseUp;\n    private onTouchStart;\n    private onTouchEnd;\n    private onMouseEnter;\n    private onMouseLeave;\n    private canDrag;\n    private setCursor;\n    private unsubscribeEventListeners;\n    private setElementStyles;\n    private getScrollElement;\n    private getScrollPosition;\n    private shouldBeginDrag;\n    private enableScroll;\n    private disableScroll;\n    private hasScrollbar;\n}\n"]}