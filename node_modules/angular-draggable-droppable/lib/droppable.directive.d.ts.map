{"version":3,"file":"droppable.directive.d.ts","sources":["droppable.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit, ElementRef, OnDestroy, EventEmitter, NgZone, Renderer2 } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DraggableHelper } from './draggable-helper.provider';\nimport { DraggableScrollContainerDirective } from './draggable-scroll-container.directive';\nexport interface DropEvent<T = any> {\n    dropData: T;\n}\nexport declare class DroppableDirective implements OnInit, OnDestroy {\n    private element;\n    private draggableHelper;\n    private zone;\n    private renderer;\n    private scrollContainer;\n    /**\n     * Added to the element when an element is dragged over it\n     */\n    dragOverClass: string;\n    /**\n     * Added to the element any time a draggable element is being dragged\n     */\n    dragActiveClass: string;\n    /**\n     * Called when a draggable element starts overlapping the element\n     */\n    dragEnter: EventEmitter<DropEvent<any>>;\n    /**\n     * Called when a draggable element stops overlapping the element\n     */\n    dragLeave: EventEmitter<DropEvent<any>>;\n    /**\n     * Called when a draggable element is moved over the element\n     */\n    dragOver: EventEmitter<DropEvent<any>>;\n    /**\n     * Called when a draggable element is dropped on this element\n     */\n    drop: EventEmitter<DropEvent<any>>;\n    currentDragSubscription: Subscription;\n    constructor(element: ElementRef<HTMLElement>, draggableHelper: DraggableHelper, zone: NgZone, renderer: Renderer2, scrollContainer: DraggableScrollContainerDirective);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n}\n"]}